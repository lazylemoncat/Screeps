{"version":3,"file":"main.js","sources":["../src/helper/helper.ts","../src/MyMemory/MemoryDelete.ts","../src/MyMemory/MemoryRoles.ts","../src/MyMemory/MemoryRoom.ts","../src/MyMemory/MemoryRefresh.ts","../src/Structure/StructureLink.ts","../src/Structure/StructureTower.ts","../src/NewCreep/NewCreepBodys.ts","../src/Tasks/Tasks.ts","../src/Role/RoleHarvester.ts","../src/Tasks/HarvestTask.ts","../src/Role/RoleCarrier.ts","../src/Tasks/TransferTask.ts","../src/Role/RoleUpgrader.ts","../src/Tasks/UpgradeTask.ts","../src/Role/RoleBuilder.ts","../src/Role/RoleRepairer.ts","../src/Tasks/BuildTask.ts","../src/Tasks/RepairTask.ts","../src/MyMemory/MemoryAppend.ts","../src/Structure/StructureSpawn.ts","../src/main.ts"],"sourcesContent":["import { tasks } from \"@/Tasks/Tasks\";\r\n\r\nglobal.helper = function(text: string): string {\r\n  switch (text) {\r\n    case 'controller': {\r\n      for (let name in Memory.rooms) {\r\n        let room = Memory.rooms[name];\r\n        let controller = Game.getObjectById(room.controller);\r\n        let progress = +(controller.progress / controller.progressTotal).toFixed(2) * 100;\r\n        console.log(name);\r\n        console.log(controller.level);\r\n        console.log('升级还需要', controller.progressTotal - controller.progress);\r\n        console.log('已升级完成', progress + '%');\r\n        console.log('可用安全模式次数为：', controller.safeModeAvailable);\r\n        console.log('-------------------------------------------------------');\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return 'complete';\r\n}","export const memoryDelete = {\r\n  // 删除死去的creep的memory\r\n  deleteDead: function(): void {\r\n    for(let name in Memory.creeps) {\r\n      if(!Game.creeps[name]) {\r\n        delete Memory.creeps[name];\r\n      }\r\n    }\r\n  },\r\n  // 单独删除一个对象的memory\r\n  delete: function(index: number, isCreep: boolean, role?: string): void {\r\n    if (isCreep) {\r\n        switch (role) {\r\n          case 'harvester': Memory.roles.harvesters.splice(index, 1); break;\r\n          case 'carrier': Memory.roles.carriers.splice(index, 1); break;\r\n          case 'builder': Memory.roles.builders.splice(index, 1); break;\r\n          case 'upgrader': Memory.roles.upgraders.splice(index, 1); break;\r\n          case 'repairer': Memory.roles.repairers.splice(index, 1); break;\r\n        }\r\n    } else {\r\n      ;\r\n    }\r\n  }\r\n}\r\n","// 在memory中储存各个角色的Id\r\nexport const memoryRoles = {\r\n  refresh: function(): void {\r\n    let roles = returnIds();\r\n    Memory.roles = {\r\n      // Id<Creep>[]\r\n      harvesters: roles.harvester,\r\n      carriers: roles.carrier,\r\n      upgraders: roles.upgrader,\r\n      builders: roles.builder,\r\n      repairers: roles.repairer,\r\n      claimers: roles.claimer,\r\n    }\r\n  }\r\n}\r\n\r\nfunction returnIds(): {\r\n  harvester: Id<Creep>[],\r\n  carrier: Id<Creep>[],\r\n  upgrader: Id<Creep>[],\r\n  builder: Id<Creep>[],\r\n  repairer: Id<Creep>[],\r\n  claimer: Id<Creep>[],\r\n} {\r\n  let roles = {\r\n    harvester: [],\r\n    carrier: [],\r\n    upgrader: [],\r\n    builder: [],\r\n    repairer: [],\r\n    claimer: [],\r\n  }\r\n  for (let name in Game.creeps) {\r\n    let creep = Game.creeps[name];\r\n    if (creep.memory.role != undefined) {\r\n      roles[creep.memory.role].push(creep.id);\r\n    }\r\n  }\r\n  return roles;\r\n}","// 储存各个房间的相关信息\r\nexport const memoryRoom = {\r\n  refresh: function(): void {\r\n    Memory.rooms = {};\r\n    for(let name in Game.rooms) {\r\n      let structures = Game.rooms[name].find(FIND_STRUCTURES);\r\n      Memory.rooms[name] = {\r\n        // Id<Source>[]\r\n        sources: Game.rooms[name].find(FIND_SOURCES).map(source => source.id),\r\n        // Id<StructureController>\r\n        controller: Game.rooms[name].controller.id,\r\n        // Id<AnyStructure>[]\r\n        structures: structures.map(structure => structure.id) as Id<AnyStructure>[],\r\n        // Id<StructureSpawn>[]\r\n        spawns: structures.filter(structure => structure.structureType == STRUCTURE_SPAWN).\r\n          map(structure => structure.id) as Id<StructureSpawn>[],\r\n        // Id<ConstructionSite>[]\r\n        sites: Game.rooms[name].find(FIND_CONSTRUCTION_SITES).map(site => site.id),\r\n        // Id<StructureContainer>[]\r\n        containers: structures.filter(structure => structure.structureType == STRUCTURE_CONTAINER).\r\n          map(structure => structure.id) as Id<StructureContainer>[],\r\n        // Id<\r\n        towers: structures.filter(structure => structure.structureType == STRUCTURE_TOWER).\r\n          map(structure => structure.id) as Id<StructureTower>[],\r\n        // Id<StructureStorage>\r\n        storage: Game.rooms[name].storage ? Game.rooms[name].storage.id : null,\r\n        // StructureLink[]\r\n        links: structures.filter(structure => structure.structureType == STRUCTURE_LINK).\r\n          map(structure => structure.id) as Id<StructureLink>[],\r\n        // harvested energy fromLink~toLink\r\n        fromLinks: creatLinks('from'),\r\n        toLinks: creatLinks('to'),\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nfunction creatLinks(context: string): Id<StructureLink>[] {\r\n  let from: Id<StructureLink>[] = [];\r\n  let to: Id<StructureLink>[]= [];\r\n  let links: StructureLink[] = Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_LINK});\r\n  let sources = Object.values(Game.rooms)[0].find(FIND_SOURCES);\r\n  for (let i = 0; i < links.length; ++i) {\r\n    if (links[i].pos.findInRange(sources, 3)[0] != undefined) {\r\n      from.push(links[i].id);\r\n    } else {\r\n      to.push(links[i].id);\r\n    }\r\n  }\r\n  switch (context) {\r\n    case 'from': return from;\r\n    case 'to': return to;\r\n  }\r\n  return [];\r\n}","import { memoryDelete } from \"./MemoryDelete\"\r\nimport { memoryRoles } from \"./MemoryRoles\";\r\nimport { memoryRoom } from \"./MemoryRoom\";\r\n// 重置memory\r\nexport const memoryRefresh = {\r\n  refresh: function(): void {\r\n    memoryRoom.refresh();\r\n    memoryDelete.deleteDead();\r\n    memoryRoles.refresh();\r\n  }\r\n}","export const structureLink = {\r\n  run: function(link: StructureLink, room: RoomMemory): void {\r\n    // fromlink 运输能量给 tolink\r\n    for (let i = 0; i < room.fromLinks.length; ++i) {\r\n      if (room.fromLinks[i] == link.id) {\r\n        transfer(link, room);\r\n        break;\r\n      }\r\n    }\r\n    return;\r\n  },\r\n}\r\n\r\nfunction transfer(link: StructureLink, room: RoomMemory): void {\r\n  if (link.store[RESOURCE_ENERGY] >= 100) {\r\n    for (let i = 0; i < room.toLinks.length; ++i) {\r\n      let energy = Game.getObjectById(room.toLinks[i]).store.getFreeCapacity(RESOURCE_ENERGY);\r\n      if (energy > 10) {\r\n        link.transferEnergy(Game.getObjectById(room.toLinks[i]));\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}","export const structureTower = {\r\n  run: function (tower: StructureTower): void {\r\n    // 优先执行攻击指令,其次治疗,最后修复建筑耐久\r\n    let enemy: Creep[] = tower.room.find(FIND_HOSTILE_CREEPS);\r\n    let injured: Creep[] = tower.room.find(FIND_MY_CREEPS, {filter :\r\n      (creeps) => creeps.hits < creeps.hitsMax && creeps.room == creeps.room});\r\n    if (enemy[0] != undefined) {\r\n      goAttack(tower, enemy);\r\n    } else if (injured[0] != undefined) {\r\n      tower.heal(injured[0]);\r\n    } else {\r\n      runRepair(tower);\r\n    }\r\n    return;\r\n  }\r\n};\r\n\r\nfunction goAttack(tower: StructureTower, enemy: Creep[]): void {\r\n  // 攻击最近的敌人\r\n  let target: Creep = tower.pos.findClosestByRange(enemy);\r\n  tower.attack(target);\r\n  return;\r\n}\r\n\r\nfunction runRepair (tower: StructureTower): void {\r\n  let targetTo: AnyStructure[] = tower.room.find(FIND_STRUCTURES).filter(object =>\r\n    object.hits < object.hitsMax && object.structureType != STRUCTURE_WALL &&\r\n    object.structureType != STRUCTURE_RAMPART);\r\n  tower.repair(targetTo[0]);\r\n  return;\r\n}","// 返回孵化creep需要的部件数组\r\nexport const newCreepBody = function(role: String, spawn: Id<StructureSpawn>): BodyPartConstant[] {\r\n  // MOVE 50,WORK 100,CARRY 50,ATTACK 80,RANGED_ATTACK 150,HEAL 250,CLAIM 600,TOUGH 10\r\n  let capacity: number = Game.getObjectById(spawn).room.energyCapacityAvailable;\r\n  if (capacity == 300 || Game.getObjectById(spawn).room.find(FIND_CREEPS).length < 4 ) {\r\n    switch (role) {\r\n      case 'harvester' : return [WORK, CARRY, MOVE];\r\n      case 'upgrader' : return [WORK, CARRY, MOVE];\r\n      case 'builder' : return [WORK, CARRY, MOVE, MOVE];\r\n      case 'carrier' : return [CARRY, MOVE];\r\n      case 'repairer' : return [WORK, CARRY, MOVE, MOVE];\r\n    }\r\n  } else {\r\n    switch (role) {\r\n      case 'harvester': {\r\n        let bodys: BodyPartConstant[] = [CARRY];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length >= 7) {\r\n            if (capacity >= 2) {\r\n              bodys.push(WORK);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'upgrader': {\r\n        let bodys: BodyPartConstant[] = [];\r\n        capacity /= 50;\r\n        bodys.push(WORK, CARRY, MOVE);\r\n        capacity -= 4;\r\n        for (; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'builder': {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 4; capacity -= 4) {\r\n          bodys.push(WORK, CARRY, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'carrier': {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 2; capacity -= 2) {\r\n          bodys.push(MOVE, CARRY);\r\n          if (bodys.length == 30) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'repairer': {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, CARRY, MOVE, MOVE);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'claimer': {\r\n        if (capacity >= 650) {\r\n          return [CLAIM, MOVE];\r\n        } else {\r\n          return [];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [];\r\n}","export const tasks = {\r\n  withdraw: [],\r\n  transfer: [],\r\n\r\n  returnTransfer: function(room: RoomMemory) {\r\n    findTransferTask(room);\r\n    const structureType = ['spawn', 'extension', 'tower', 'container', 'storage',];\r\n    tasks.transfer.sort(function (a,b) {\r\n      let typea = structureType.indexOf(a.type);\r\n      let typeb = structureType.indexOf(b.type);\r\n      return typea - typeb;\r\n    });\r\n    return tasks.transfer;\r\n  },\r\n\r\n  returnWithdraw: function(room: RoomMemory) {\r\n    findWithdraw(room);\r\n    const type = ['creep', 'link', 'container', 'storage',];\r\n    tasks.withdraw.sort(function (a,b) {\r\n      let typea = type.indexOf(a.type);\r\n      let typeb = type.indexOf(b.type);\r\n      return typea - typeb;\r\n    });\r\n    return tasks.withdraw;\r\n  },\r\n}\r\n\r\nfunction findWithdraw(room: RoomMemory): void {\r\n  withdrawTask('link', room);\r\n  withdrawTask('container', room);\r\n  withdrawTask('storage', room);\r\n  return;\r\n}\r\n\r\nfunction findTransferTask(room: RoomMemory): void {\r\n  transferTask('spawn', room);\r\n  transferTask('extension', room);\r\n  transferTask('tower', room);\r\n  transferTask('container', room);\r\n  transferTask('storage', room);\r\n  return;\r\n}\r\n\r\nfunction transferTask(type: string, room: RoomMemory): void {\r\n  let obj: {type?: string, id?: Id<AnyStoreStructure>, energy?: number} = {};\r\n  let targets:Id<AnyStoreStructure>[] = (room.structures as Id<AnyStoreStructure>[]).filter(structure => \r\n    Game.getObjectById(structure).structureType == type &&\r\n    Game.getObjectById(structure).store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n  for (let i = 0; i < targets.length; ++i) {\r\n    let energy = Game.getObjectById(targets[i]).store.getFreeCapacity(RESOURCE_ENERGY);\r\n    obj = {type: type, id: targets[i], energy: energy};\r\n    if (!tasks.transfer.some(i => i.id == obj.id) && \r\n        Game.getObjectById(targets[i]).pos.findInRange(FIND_SOURCES, 2).length == 0) {\r\n      tasks.transfer.push(obj);\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction withdrawTask(type: string, room: RoomMemory): void {\r\n  let obj: {type?: string, id?: Id<AnyStoreStructure>, energy?: number} = {};\r\n  switch (type) {\r\n    case 'link': {\r\n      let links: Id<StructureLink>[] = room.toLinks;\r\n      for (let i = 0; i < links.length; ++i){\r\n        let link = Game.getObjectById(links[i]);\r\n        let energy = link.store[RESOURCE_ENERGY];\r\n        obj = {type: 'link', id: link.id, energy: energy};\r\n        if (energy > 100 && !tasks.withdraw.find(i => i.id == obj.id)) {\r\n          tasks.withdraw.push(obj);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case 'container': {\r\n      let containers: Id<StructureContainer>[] = room.containers;\r\n      for (let i = 0; i < containers.length; ++i) {\r\n        if (Game.getObjectById(containers[i]).pos.findInRange(FIND_SOURCES, 1).length != 0) {\r\n          let container = Game.getObjectById(containers[i]);\r\n          let energy = container.store[RESOURCE_ENERGY];\r\n          obj = {type: 'container', id: container.id, energy: energy};\r\n          if (energy >= 50 && !tasks.withdraw.find(i => i.id == obj.id)) {\r\n            tasks.withdraw.push(obj);\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case 'storage': {\r\n      let storage = Game.getObjectById(room.storage);\r\n      if (storage != undefined) {\r\n        let energy = storage.store[RESOURCE_ENERGY];\r\n        obj = {type: 'storage', id: storage.id, energy: energy};\r\n        if (!tasks.withdraw.find(i => i.id == obj.id) && energy >= 50) {\r\n          tasks.withdraw.push(obj);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return;\r\n}","import { tasks } from \"../Tasks/Tasks\";\n\nexport const roleHarvester = {\n  run: function(creep: Creep, room: RoomMemory): void {\n    let transfered: boolean = false;\n    // 避免采集过多能量掉在地上造成浪费\n    if (creep.store.getFreeCapacity() < creep.getActiveBodyparts(WORK) * 2) {\n      transfered = transferEnergy(creep, room);\n    }\n    goHarvest(creep, transfered, room);\n\t}\n};\n\nfunction goHarvest(creep: Creep, transfered: boolean, room: RoomMemory): void {\n  let source: Source = Game.getObjectById(creep.memory.sourcesPosition);\n  if (!creep.pos.isNearTo(source)) {\n    creep.moveTo(source);\n    return;\n  }\n  if (source.energy == 0 || \n      creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0 && !transfered) {\n    return;\n  }\n\n  let containers = room.containers.map(i => Game.getObjectById(i));\n  let container = creep.pos.findInRange(containers, 1)[0];\n  if (container != undefined) {\n    if (!creep.pos.isEqualTo(container)) {\n      creep.moveTo(container);\n    }\n  }\n  creep.harvest(source);\n  return;\n}\n\nfunction transferEnergy(creep: Creep, room: RoomMemory): boolean {\n  if (Game.getObjectById(creep.memory.waiting) != null) {\n    return;\n  }\n  let links: Id<StructureLink>[] = room.links;\n  let containers = room.containers.map(i => Game.getObjectById(i));\n  let sources: Id<Source>[] = room.sources;\n  // 若creep身边无link,container则发布一个withdraw任务让carrier拿走能量\n  if (links.length == 0 && containers.length < sources.length &&\n      creep.pos.findInRange(containers, 1).length == 0) {\n    let obj = {type: 'creep', id: creep.id, energy: creep.store[RESOURCE_ENERGY]};\n    if (!tasks.withdraw.find(i => i.id == creep.id)) {\n      tasks.withdraw.push(obj);\n    }\n    return false;\n  }\n  if (!transfer(creep, room)) {\n    return false;\n  }\n  return true;\n}\n\nfunction transfer(creep: Creep, room: RoomMemory): boolean {\n  // 优先将能量送往link,若身边有link,则不再将能量送进container中\n  let links = room.links.map(i => Game.getObjectById(i));\n  let link: StructureLink = creep.pos.findInRange(links, 1)[0];\n  if (link != undefined) {\n    if (creep.transfer(link, RESOURCE_ENERGY) == OK) {\n      return true;\n    }\n    return false;\n  }\n  let containers = room.containers.map(i => Game.getObjectById(i));\n  let container = creep.pos.findInRange(containers, 1)[0];\n  if (container != undefined) {\n    if (creep.transfer(container, RESOURCE_ENERGY) == OK) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n}","import { memoryAppend } from \"@/MyMemory/MemoryAppend\";\r\nimport { memoryDelete } from \"@/MyMemory/MemoryDelete\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleHarvester } from \"../Role/RoleHarvester\";\r\n\r\nexport const harvestTask = {\r\n  run: function(room: RoomMemory): void {\r\n    newCreep(room);\r\n\r\n    for (let i = 0; i < Memory.roles.harvesters.length; ++i) {\r\n      let harvester = Game.getObjectById(Memory.roles.harvesters[i]);\r\n      if (harvester == null) {\r\n        memoryDelete.delete(i, true, 'harvester');\r\n        continue;\r\n      }\r\n      roleHarvester.run(harvester, room);\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nfunction newCreep(room: RoomMemory): void {\r\n  let harvesters = Memory.roles.harvesters;\r\n  let carriers = Memory.roles.carriers;\r\n  let sources = room.sources;\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = null;\r\n  if (harvesters.length <= carriers.length && harvesters.length < sources.length) {\r\n    Game.spawns['Spawn1'].memory.shouldSpawn = 'harvester';\r\n    newHarvester(harvesters, sources.length, room);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction newHarvester(harvesters: Id<Creep>[], sourcesLength: number, room: RoomMemory): void{\r\n  let posFlag: number = 0;\r\n  for (let i = 0; i < sourcesLength; ++i) {\r\n    for (let j = 0; j < harvesters.length; ++j) {\r\n      let harvester = Game.getObjectById(harvesters[j]);\r\n      if (Game.getObjectById(room.sources[i]).id == harvester.memory.sourcesPosition) {\r\n        posFlag += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (posFlag == i) break;\r\n  }\r\n  if (posFlag >= sourcesLength) return;\r\n\r\n  let newName: string = \"Harvester\" + Game.time;\r\n  let sourceId = Game.getObjectById(room.sources[posFlag]).id as Id<Source>;\r\n  let memory = {role: 'harvester', sourcesPosition: sourceId};\r\n  let bodys = newCreepBody('harvester', room.spawns[0]);\r\n  if (Game.spawns['Spawn1'].spawnCreep(bodys, newName, {memory: memory}) == OK) {\r\n    ;\r\n  }\r\n  return;\r\n}","import { tasks } from \"../Tasks/Tasks\";\r\n\r\nexport const roleCarrier = {\r\n  // 判断接收withdraw任务还是transfer任务\r\n  isTransfering: function (creep: Creep): boolean {\r\n    if(creep.memory.transfering && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.transfering = false;\r\n    }\r\n    if(!creep.memory.transfering && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.transfering = true;\r\n    }\r\n    return creep.memory.transfering;\r\n  },\r\n\r\n  goTransfer: function (creep: Creep, task: Id<AnyStoreStructure>) {\r\n    creep.memory.carrierTarget = task;\r\n    let target: AnyStoreStructure = Game.getObjectById(task) as AnyStoreStructure;\r\n    if (target == null || target.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n      creep.memory.carrierTarget = null;\r\n      return;\r\n    }\r\n    let res: number = 0;\r\n    res = creep.transfer(target, RESOURCE_ENERGY);\r\n    switch (res) {\r\n      case OK: creep.memory.carrierTarget = null; break;\r\n      case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n    }\r\n    return;\r\n  },\r\n\r\n  goWithdraw: function(creep: Creep, task: Id<Creep | AnyStoreStructure>) {\r\n    let target: Creep | AnyStoreStructure = Game.getObjectById(task);\r\n    creep.memory.carrierTarget = task;\r\n    if (target == null || target.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.carrierTarget = null;\r\n      return;\r\n    }\r\n    let res: number = 0;\r\n    if (target instanceof Creep) {\r\n      res = target.transfer(creep, RESOURCE_ENERGY);\r\n      target.memory.waiting = creep.id;\r\n      switch (res) {\r\n        case OK: creep.memory.carrierTarget = null; target.memory.waiting = null; break;\r\n        case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n      }\r\n    } else {\r\n      res = creep.withdraw(target, RESOURCE_ENERGY);\r\n      switch (res) {\r\n        case OK: creep.memory.carrierTarget = null; break;\r\n        case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n      }\r\n    }  \r\n    return;\r\n  },\r\n}","import { memoryAppend } from \"@/MyMemory/MemoryAppend\";\r\nimport { memoryDelete } from \"@/MyMemory/MemoryDelete\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleCarrier } from \"../Role/RoleCarrier\";\r\nimport { tasks } from \"./Tasks\";\r\n\r\nexport const transferTask = {\r\n  run: function(room: RoomMemory): void {\r\n    newCarrier(room);\r\n\r\n    let withdrawTask: {type: string, id: Id<AnyStoreStructure>, energy: number}[] = tasks.returnWithdraw(room);\r\n    let transferTask: {type: string, id: Id<AnyStoreStructure>, energy: number}[] = tasks.returnTransfer(room);\r\n    for (let i = 0; i < Memory.roles.carriers.length; ++i) {\r\n      let carrier: Creep = Game.getObjectById(Memory.roles.carriers[i]);\r\n      if (carrier == null) {\r\n        memoryDelete.delete(i, true, 'carrier');\r\n        continue;\r\n      }\r\n      let isTransfering = roleCarrier.isTransfering(carrier);\r\n      if (carrier.memory.carrierTarget != null) {\r\n        if (isTransfering) {\r\n          roleCarrier.goTransfer(carrier, carrier.memory.carrierTarget as Id<AnyStoreStructure>);\r\n        } else {\r\n          roleCarrier.goWithdraw(carrier, carrier.memory.carrierTarget)\r\n        }\r\n        continue;\r\n      }\r\n      if (isTransfering) {\r\n        if (transferTask[0] == undefined) {\r\n          continue;\r\n        }\r\n        roleCarrier.goTransfer(carrier, transferTask[0].id);\r\n        transferTask[0].energy -= carrier.store[RESOURCE_ENERGY];\r\n        if (transferTask[0].energy <= 0) {\r\n          transferTask.shift();\r\n        }\r\n      } else {\r\n        if (withdrawTask[0] == undefined) {\r\n          continue;\r\n        }\r\n        roleCarrier.goWithdraw(carrier, withdrawTask[0].id);\r\n        withdrawTask[0].energy -= carrier.store.getFreeCapacity(RESOURCE_ENERGY);\r\n        if (withdrawTask[0].energy <= 0) {\r\n          withdrawTask.shift();\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nfunction newCarrier(room: RoomMemory): void{\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  let harvesters = Memory.roles.harvesters;\r\n  let carriers = Memory.roles.carriers;\r\n  let sources = room.sources;\r\n  if (carriers.length >= harvesters.length && carriers.length >= sources.length) {\r\n      return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'carrier';\r\n\r\n  let newName: string = 'Carrier' + Game.time;\r\n  let bodys = newCreepBody('carrier', room.spawns[0]);\r\n  if (Game.spawns['Spawn1'].spawnCreep(bodys, newName, {memory: {role: 'carrier',}}) == OK) {\r\n    ;\r\n  }\r\n  return;\r\n}","export const roleUpgrader = {\n  run: function(creep: Creep, room: RoomMemory): void {\n    if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.upgrading = false;\n    }\n    if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {\n      creep.memory.upgrading = true;\n    }\n\n    if(creep.memory.upgrading) {\n      goUpgrade(creep);\n    } else {\n      goGetEnergy(creep, room);\n    }\n\t}\n};\n\nfunction goUpgrade(creep: Creep): void {\n  if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(creep.room.controller);\n  }\n  return;\n}\n\nfunction goGetEnergy(creep: Creep, room: RoomMemory): void {\n  let creepNeed = creep.store.getFreeCapacity(RESOURCE_ENERGY);\n  let controller = creep.room.controller;\n  let containers = room.containers.map(i => Game.getObjectById(i));\n  let container = controller.pos.findInRange(containers, 2)[0];\n  if (container != undefined && container.store[RESOURCE_ENERGY] >= creepNeed) {\n    if (creep.withdraw(container, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(container);\n    }\n    return;\n  } else {\n    let target = creep.room.find(FIND_STRUCTURES).filter(i => (i.structureType == STRUCTURE_CONTAINER ||\n      i.structureType == STRUCTURE_STORAGE) && \n      i.store[RESOURCE_ENERGY] >= creepNeed);\n    if (target[0] != undefined) {\n      if (creep.withdraw(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(target[0]);\n      }\n    } else {\n      let source = Game.getObjectById(room.sources[0]);\n      if (creep.harvest(source) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(source);\n      }\n    }\n  }\n  return;\n}","import { roleUpgrader } from \"../Role/RoleUpgrader\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { memoryDelete } from \"@/MyMemory/MemoryDelete\";\r\n\r\nexport const upgradeTask = {\r\n  run: function(room: RoomMemory): void {\r\n    newUpgrader(room);\r\n    for (let i = 0; i < Memory.roles.upgraders.length; ++i) {\r\n      let upgrader = Game.getObjectById(Memory.roles.upgraders[i]);\r\n      if (upgrader == null) {\r\n        memoryDelete.delete(i, true, 'upgrader');\r\n        continue;\r\n      }\r\n      roleUpgrader.run(upgrader, room);\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nfunction newUpgrader(room: RoomMemory): void {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  let upgradersNum = room.sites.length > 0 ? 1 : 3;\r\n  if (Game.getObjectById(room.controller).level == 8) {\r\n    upgradersNum = 1;\r\n  }\r\n  if (Memory.roles.upgraders.length >= upgradersNum) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'upgrader';\r\n  let newName: string = 'Upgrader' + Game.time;\r\n  let bodys = newCreepBody('upgrader', room.spawns[0]);\r\n  if (Game.spawns['Spawn1'].spawnCreep(bodys, newName, {memory: {role: 'upgrader'}}) == OK) {\r\n    ;\r\n  }\r\n  return;\r\n}","export const roleBuilder = {\n  run: function (creep: Creep, room: RoomMemory): void {\n    if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.building = false;\n    } else if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {\n      creep.memory.building = true;\n    }\n\n    if(creep.memory.building) {\n      goBuild(creep, room);\n    } else {\n      goGetEnergy(creep, room);\n    }\n\t}\n};\n\nfunction goBuild(creep: Creep, room: RoomMemory): void {\n  let sites: Id<ConstructionSite>[] = room.sites;\n  let target: ConstructionSite = Game.getObjectById(sites[0]);\n  if(target) {\n    if(creep.build(target) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(target, {visualizePathStyle: {stroke: '#ffffff'}});\n    }\n  }\n  return;\n}\n\nfunction goGetEnergy(creep: Creep, room: RoomMemory): void {\n  let creepNeed = creep.store.getFreeCapacity(RESOURCE_ENERGY);\n  // 优先从storage，container中拿取能量，若能量不足或无建筑则从source中采集\n  if (creep.memory.carrierTarget == null) {\n    let targetStore: AnyStoreStructure = null;\n    if (room.storage != undefined && \n        Game.getObjectById(room.storage).store[RESOURCE_ENERGY] >= creepNeed) {\n      targetStore = Game.getObjectById(room.storage);\n    } else if (room.containers[0] != undefined) {\n      let containers = room.containers.map(i => Game.getObjectById(i));\n      targetStore = creep.pos.findClosestByRange(containers, {filter: store =>\n        store.store[RESOURCE_ENERGY] >= creepNeed});\n    }\n    if (targetStore == null) {\n      let sources: Source = Game.getObjectById(room.sources[0]);\n      if (creep.harvest(sources) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(sources);\n      }\n      return;\n    }\n    // 将对象存储入creep内存中\n    creep.memory.carrierTarget = targetStore.id;\n  }\n\n  let target = Game.getObjectById(creep.memory.carrierTarget) as AnyStoreStructure;\n  if (target == null || target.store[RESOURCE_ENERGY] < creepNeed) {\n    creep.memory.carrierTarget = null;\n    return;\n  }\n  let res = creep.withdraw(target, RESOURCE_ENERGY);\n  switch (res) {\n    case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\n    case OK: creep.memory.carrierTarget = null; break;\n  }\n  return;\n}","export const roleRepairer = {\r\n  run: function(creep: Creep, room: RoomMemory): void {\r\n    if(creep.memory.repairing && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n    } else if(!creep.memory.repairing && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.repairing = true;\r\n    }\r\n\r\n    if (creep.memory.repairing) {\r\n      goRepair(creep, room);\r\n    } else {\r\n      goGetEnergy(creep, room);\r\n    }\r\n  }\r\n}\r\n\r\nfunction goRepair(creep: Creep, room: RoomMemory): void {\r\n  // 根据repairer的内存直接找到对象\r\n  let repairTarget = Game.getObjectById(creep.memory.repairtarget);\r\n  if (repairTarget != null && repairTarget.hits < repairTarget.hitsMax) {\r\n    if (creep.repair(repairTarget) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(repairTarget);\r\n    }\r\n    return;\r\n  }\r\n  let injured: AnyStructure[] = creep.room.find(FIND_STRUCTURES).filter(object => \r\n    object.hits < object.hitsMax);\r\n  let targetTo: AnyStructure[] = [];\r\n  // 若有tower,则专心修墙\r\n  if (room.towers.length == 0){\r\n    targetTo = injured.filter(structure => structure.structureType != STRUCTURE_WALL);\r\n  } else {\r\n    targetTo = injured.sort((a,b) => a.hits - b.hits);\r\n  }\r\n  creep.memory.repairtarget = targetTo[0].id;\r\n  if (creep.repair(targetTo[0]) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(targetTo[0]);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction goGetEnergy(creep: Creep, room: RoomMemory): void {\r\n  let creepNeed = creep.store.getFreeCapacity(RESOURCE_ENERGY);\r\n  // 优先从storage，container中拿取能量，若能量不足或无建筑则从source中采集\r\n  if (creep.memory.carrierTarget == null) {\r\n    let targetStore: AnyStoreStructure = null;\r\n    if (room.storage != undefined && \r\n        Game.getObjectById(room.storage).store[RESOURCE_ENERGY] >= creepNeed) {\r\n      targetStore = Game.getObjectById(room.storage);\r\n    } else if (room.containers[0] != undefined) {\r\n      let containers = room.containers.map(i => Game.getObjectById(i));\r\n      targetStore = creep.pos.findClosestByRange(containers, {filter: store =>\r\n        store.store[RESOURCE_ENERGY] >= creepNeed});\r\n    }\r\n    if (targetStore == null) {\r\n      let sources: Source = Game.getObjectById(room.sources[0]);\r\n      if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(sources[0]);\r\n      }\r\n      return;\r\n    }\r\n    // 将对象存储入creep内存中\r\n    creep.memory.carrierTarget = targetStore.id;\r\n  }\r\n\r\n  let target = Game.getObjectById(creep.memory.carrierTarget) as AnyStoreStructure;\r\n  if (target == null || target.store[RESOURCE_ENERGY] < creepNeed) {\r\n    creep.memory.carrierTarget = null;\r\n    return;\r\n  }\r\n  let res = creep.withdraw(target, RESOURCE_ENERGY);\r\n  switch (res) {\r\n    case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n    case OK: creep.memory.carrierTarget = null; break;\r\n  }\r\n  return;\r\n}","import { roleBuilder } from \"../Role/RoleBuilder\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleRepairer } from \"@/Role/RoleRepairer\";\r\nimport { memoryDelete } from \"@/MyMemory/MemoryDelete\";\r\nimport { memoryAppend } from \"@/MyMemory/MemoryAppend\";\r\n\r\nexport const buildTask = {\r\n  run: function(room: RoomMemory): void {\r\n    newBuilder(room);\r\n\r\n    for (let i = 0; i < Memory.roles.builders.length; ++i) {\r\n      let builder = Game.getObjectById(Memory.roles.builders[i]);\r\n      if (builder == null) {\r\n        memoryDelete.delete(i, true, 'builder');\r\n        continue;\r\n      }\r\n      if (room.sites.length == 0) {\r\n        roleRepairer.run(builder, room);\r\n      } else {\r\n        roleBuilder.run(builder, room);\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nfunction newBuilder(room: RoomMemory): void {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  let builders = Memory.roles.builders;\r\n  let sites = room.sites;\r\n  if (!(sites.length > 0 && builders.length < 3)) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'builder';\r\n  let newName: string = 'Builder' + Game.time;\r\n  let bodys = newCreepBody('builder', room.spawns[0]);\r\n  if (Game.spawns['Spawn1'].spawnCreep(bodys,newName, {memory: {role: 'builder'}}) == OK) {\r\n    ;\r\n  }\r\n  return;\r\n}","import { roleRepairer } from \"../Role/RoleRepairer\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { memoryDelete } from \"@/MyMemory/MemoryDelete\";\r\nimport { memoryAppend } from \"@/MyMemory/MemoryAppend\";\r\n\r\nexport const repairTask = {\r\n  run: function(room: RoomMemory): void {\r\n    newRepairer(room);\r\n    for (let i = 0; i < Memory.roles.repairers.length; ++i) {\r\n      let repaier = Game.getObjectById(Memory.roles.repairers[i])\r\n      if (repaier == null) {\r\n        memoryDelete.delete(i, true, 'repairer');\r\n        continue;\r\n      }\r\n      roleRepairer.run(repaier, room);\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\nfunction newRepairer(room: RoomMemory): void {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  let repairers = Memory.roles.repairers;\r\n  let containers = room.containers;\r\n  if (repairers.length >= 1 || containers.length == 0) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'repairer';\r\n  let newName: string = 'Repairer' + Game.time;\r\n  let bodys = newCreepBody('repairer', room.spawns[0])\r\n  if (Game.spawns['Spawn1'].spawnCreep(bodys, newName, {memory: {role: 'repairer'}}) == OK) {\r\n    ;\r\n  }\r\n  return;\r\n}","export const memoryAppend = {\r\n  append: function(id: Id<Creep | Structure>, isCreep: boolean, role?: string) {\r\n    if (isCreep) {\r\n      let creepId = id as Id<Creep>;\r\n      if (Memory.roles[role+'s'].includes(id)) {\r\n        return;\r\n      }\r\n      switch (role) {\r\n        case 'harvester': Memory.roles.harvesters.push(creepId); break\r\n        case 'carrier': Memory.roles.carriers.push(creepId); break;\r\n        case 'builder': Memory.roles.builders.push(creepId); break\r\n        case 'upgrader': Memory.roles.upgraders.push(creepId); break\r\n        case 'repairer': Memory.roles.repairers.push(creepId); break\r\n      }\r\n    }\r\n  }\r\n}","import { memoryAppend } from \"@/MyMemory/MemoryAppend\";\r\n\r\nexport const structureSpawn = {\r\n  appendMemory: function(room: RoomMemory): void {\r\n    for (let i = 0; i < room.spawns.length; ++i) {\r\n      let spawn = Game.getObjectById(room.spawns[i]);\r\n      if (spawn.spawning != null) {\r\n        let id = Game.creeps[Game.spawns['Spawn1'].spawning.name].id;\r\n        let role = Game.creeps[Game.spawns['Spawn1'].spawning.name].memory.role;\r\n        memoryAppend.append(id, true, role);\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}","// helper\r\nimport './helper/helper';\r\n// MyMemory\r\nimport { memoryRefresh } from './MyMemory/MemoryRefresh';\r\n// Structure\r\nimport { structureLink } from './Structure/StructureLink';\r\nimport { structureTower } from './Structure/StructureTower';\r\n// tasks\r\nimport { harvestTask } from './Tasks/HarvestTask';\r\nimport { transferTask } from './Tasks/TransferTask';\r\nimport { upgradeTask } from './Tasks/UpgradeTask';\r\nimport { buildTask } from './Tasks/BuildTask';\r\nimport { repairTask } from './Tasks/RepairTask';\r\nimport { claimTask } from './Tasks/ClaimTask';\r\nimport { structureSpawn } from './Structure/StructureSpawn';\r\n\r\nmemoryRefresh.refresh();\r\nexport const loop = function (): void {\r\n  if(Game.cpu.bucket == 10000) {\r\n    Game.cpu.generatePixel();\r\n  }\r\n  // 重置 memory\r\n  if (Game.time % 100 == 0) {\r\n    memoryRefresh.refresh();\r\n  }\r\n  for (let name in Memory.rooms) {\r\n    let room = Memory.rooms[name];\r\n    structureSpawn.appendMemory(room);\r\n    // 执行任务\r\n    harvestTask.run(room);\r\n    transferTask.run(room);\r\n    buildTask.run(room);\r\n    upgradeTask.run(room);\r\n    repairTask.run(room);\r\n    //claimTask.run('W59S26');\r\n    // 执行建筑的run函数\r\n    for (let name in Game.structures) {\r\n      let structure = Game.structures[name];\r\n      switch (structure.structureType) {\r\n        case STRUCTURE_TOWER : structureTower.run(structure as StructureTower); break;\r\n        case STRUCTURE_LINK : structureLink.run(structure as StructureLink, room); break;\r\n      }\r\n    }\r\n  }\r\n  return;\r\n}"],"names":["transfer","transferTask","goGetEnergy"],"mappings":";;AAEA,MAAM,CAAC,MAAM,GAAG,UAAS,IAAY,EAAA;AACnC,IAAA,QAAQ,IAAI;QACV,KAAK,YAAY,EAAE;AACjB,YAAA,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;gBAC7B,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9B,IAAI,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACrD,gBAAA,IAAI,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AAClF,gBAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAClB,gBAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC9B,gBAAA,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;gBACrE,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,GAAG,GAAG,CAAC,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC;AACxD,gBAAA,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;AACxE,aAAA;YACD,MAAM;AACP,SAAA;AACF,KAAA;AACD,IAAA,OAAO,UAAU,CAAC;AACpB,CAAC;;ACpBM,MAAM,YAAY,GAAG;;AAE1B,IAAA,UAAU,EAAE,YAAA;AACV,QAAA,KAAI,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE;AAC7B,YAAA,IAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACrB,gBAAA,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B,aAAA;AACF,SAAA;KACF;;AAED,IAAA,MAAM,EAAE,UAAS,KAAa,EAAE,OAAgB,EAAE,IAAa,EAAA;AAC7D,QAAA,IAAI,OAAO,EAAE;AACT,YAAA,QAAQ,IAAI;AACV,gBAAA,KAAK,WAAW;oBAAE,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAAC,MAAM;AAClE,gBAAA,KAAK,SAAS;oBAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAAC,MAAM;AAC9D,gBAAA,KAAK,SAAS;oBAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAAC,MAAM;AAC9D,gBAAA,KAAK,UAAU;oBAAE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAAC,MAAM;AAChE,gBAAA,KAAK,UAAU;oBAAE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAAC,MAAM;AACjE,aAAA;AACJ,SAEA;KACF;CACF;;ACvBD;AACO,MAAM,WAAW,GAAG;AACzB,IAAA,OAAO,EAAE,YAAA;AACP,QAAA,IAAI,KAAK,GAAG,SAAS,EAAE,CAAC;QACxB,MAAM,CAAC,KAAK,GAAG;;YAEb,UAAU,EAAE,KAAK,CAAC,SAAS;YAC3B,QAAQ,EAAE,KAAK,CAAC,OAAO;YACvB,SAAS,EAAE,KAAK,CAAC,QAAQ;YACzB,QAAQ,EAAE,KAAK,CAAC,OAAO;YACvB,SAAS,EAAE,KAAK,CAAC,QAAQ;YACzB,QAAQ,EAAE,KAAK,CAAC,OAAO;SACxB,CAAA;KACF;CACF,CAAA;AAED,SAAS,SAAS,GAAA;AAQhB,IAAA,IAAI,KAAK,GAAG;AACV,QAAA,SAAS,EAAE,EAAE;AACb,QAAA,OAAO,EAAE,EAAE;AACX,QAAA,QAAQ,EAAE,EAAE;AACZ,QAAA,OAAO,EAAE,EAAE;AACX,QAAA,QAAQ,EAAE,EAAE;AACZ,QAAA,OAAO,EAAE,EAAE;KACZ,CAAA;AACD,IAAA,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE;QAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9B,QAAA,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,SAAS,EAAE;AAClC,YAAA,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AACzC,SAAA;AACF,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf;;ACvCA;AACO,MAAM,UAAU,GAAG;AACxB,IAAA,OAAO,EAAE,YAAA;AACP,QAAA,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;AAClB,QAAA,KAAI,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;AAC1B,YAAA,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACxD,YAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;;gBAEnB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,EAAE,CAAC;;gBAErE,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE;;AAE1C,gBAAA,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,EAAE,CAAuB;;AAE3E,gBAAA,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,SAAS,IAAI,SAAS,CAAC,aAAa,IAAI,eAAe,CAAC;oBAChF,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,EAAE,CAAyB;;gBAExD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;;AAE1E,gBAAA,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,SAAS,IAAI,SAAS,CAAC,aAAa,IAAI,mBAAmB,CAAC;oBACxF,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,EAAE,CAA6B;;AAE5D,gBAAA,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,SAAS,IAAI,SAAS,CAAC,aAAa,IAAI,eAAe,CAAC;oBAChF,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,EAAE,CAAyB;;gBAExD,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI;;AAEtE,gBAAA,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,SAAS,IAAI,SAAS,CAAC,aAAa,IAAI,cAAc,CAAC;oBAC9E,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,EAAE,CAAwB;;AAEvD,gBAAA,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC;AAC7B,gBAAA,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC;aAC1B,CAAC;AACH,SAAA;KACF;CACF,CAAA;AAED,SAAS,UAAU,CAAC,OAAe,EAAA;IACjC,IAAI,IAAI,GAAwB,EAAE,CAAC;IACnC,IAAI,EAAE,GAAuB,EAAE,CAAC;AAChC,IAAA,IAAI,KAAK,GAAoB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,EAAC,MAAM,EAAE,SAAS,IAChG,SAAS,CAAC,aAAa,IAAI,cAAc,EAAC,CAAC,CAAC;AAC9C,IAAA,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9D,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACrC,QAAA,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;YACxD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACxB,SAAA;AAAM,aAAA;YACL,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACtB,SAAA;AACF,KAAA;AACD,IAAA,QAAQ,OAAO;AACb,QAAA,KAAK,MAAM,EAAE,OAAO,IAAI,CAAC;AACzB,QAAA,KAAK,IAAI,EAAE,OAAO,EAAE,CAAC;AACtB,KAAA;AACD,IAAA,OAAO,EAAE,CAAC;AACZ;;ACpDA;AACO,MAAM,aAAa,GAAG;AAC3B,IAAA,OAAO,EAAE,YAAA;QACP,UAAU,CAAC,OAAO,EAAE,CAAC;QACrB,YAAY,CAAC,UAAU,EAAE,CAAC;QAC1B,WAAW,CAAC,OAAO,EAAE,CAAC;KACvB;CACF;;ACVM,MAAM,aAAa,GAAG;AAC3B,IAAA,GAAG,EAAE,UAAS,IAAmB,EAAE,IAAgB,EAAA;;AAEjD,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC9C,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,EAAE;AAChC,gBAAAA,UAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrB,MAAM;AACP,aAAA;AACF,SAAA;QACD,OAAO;KACR;CACF,CAAA;AAED,SAASA,UAAQ,CAAC,IAAmB,EAAE,IAAgB,EAAA;IACrD,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,GAAG,EAAE;AACtC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC5C,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YACxF,IAAI,MAAM,GAAG,EAAE,EAAE;AACf,gBAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzD,OAAO;AACR,aAAA;AACF,SAAA;AACF,KAAA;AACH;;ACvBO,MAAM,cAAc,GAAG;IAC5B,GAAG,EAAE,UAAU,KAAqB,EAAA;;QAElC,IAAI,KAAK,GAAY,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC1D,QAAA,IAAI,OAAO,GAAY,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,EAAC,MAAM,EAC5D,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC;AAC3E,QAAA,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;AACzB,YAAA,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACxB,SAAA;AAAM,aAAA,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;YAClC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,SAAA;AAAM,aAAA;YACL,SAAS,CAAC,KAAK,CAAC,CAAC;AAClB,SAAA;QACD,OAAO;KACR;CACF,CAAC;AAEF,SAAS,QAAQ,CAAC,KAAqB,EAAE,KAAc,EAAA;;IAErD,IAAI,MAAM,GAAU,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACxD,IAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACrB,OAAO;AACT,CAAC;AAED,SAAS,SAAS,CAAE,KAAqB,EAAA;AACvC,IAAA,IAAI,QAAQ,GAAmB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,MAAM,IAC3E,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,aAAa,IAAI,cAAc;AACtE,QAAA,MAAM,CAAC,aAAa,IAAI,iBAAiB,CAAC,CAAC;IAC7C,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,OAAO;AACT;;AC9BA;AACO,MAAM,YAAY,GAAG,UAAS,IAAY,EAAE,KAAyB,EAAA;;AAE1E,IAAA,IAAI,QAAQ,GAAW,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC;IAC9E,IAAI,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,GAAG,CAAC,EAAG;AACnF,QAAA,QAAQ,IAAI;YACV,KAAK,WAAY,EAAE,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC9C,KAAK,UAAW,EAAE,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC7C,YAAA,KAAK,SAAU,EAAE,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAClD,KAAK,SAAU,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACtC,YAAA,KAAK,UAAW,EAAE,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACpD,SAAA;AACF,KAAA;AAAM,SAAA;AACL,QAAA,QAAQ,IAAI;YACV,KAAK,WAAW,EAAE;AAChB,gBAAA,IAAI,KAAK,GAAuB,CAAC,KAAK,CAAC,CAAC;gBACxC,KAAK,QAAQ,IAAI,EAAE,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,CAAC,EAAE;oBACjD,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7B,oBAAA,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;wBACrB,IAAI,QAAQ,IAAI,CAAC,EAAE;AACjB,4BAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,yBAAA;wBACD,MAAM;AACP,qBAAA;AACF,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;AACd,aAAA;YACD,KAAK,UAAU,EAAE;gBACf,IAAI,KAAK,GAAuB,EAAE,CAAC;gBACnC,QAAQ,IAAI,EAAE,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC9B,QAAQ,IAAI,CAAC,CAAC;AACd,gBAAA,OAAO,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,CAAC,EAAE;oBACnC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7B,oBAAA,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;wBAAE,MAAM;AAC9B,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;AACd,aAAA;YACD,KAAK,SAAS,EAAE;gBACd,IAAI,KAAK,GAAuB,EAAE,CAAC;gBACnC,KAAK,QAAQ,IAAI,EAAE,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,CAAC,EAAE;oBACjD,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC9B,oBAAA,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;wBAAE,MAAM;AAC9B,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;AACd,aAAA;YACD,KAAK,SAAS,EAAE;gBACd,IAAI,KAAK,GAAuB,EAAE,CAAC;gBACnC,KAAK,QAAQ,IAAI,EAAE,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,CAAC,EAAE;AACjD,oBAAA,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACxB,oBAAA,IAAI,KAAK,CAAC,MAAM,IAAI,EAAE;wBAAE,MAAM;AAC/B,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;AACd,aAAA;YACD,KAAK,UAAU,EAAE;gBACf,IAAI,KAAK,GAAuB,EAAE,CAAC;gBACnC,KAAK,QAAQ,IAAI,EAAE,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,CAAC,EAAE;oBACjD,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACpC,oBAAA,IAAI,KAAK,CAAC,MAAM,IAAI,EAAE;wBAAE,MAAM;AAC/B,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;AACd,aAAA;YACD,KAAK,SAAS,EAAE;gBACd,IAAI,QAAQ,IAAI,GAAG,EAAE;AACnB,oBAAA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACtB,iBAAA;AAAM,qBAAA;AACL,oBAAA,OAAO,EAAE,CAAC;AACX,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;AACD,IAAA,OAAO,EAAE,CAAC;AACZ,CAAC;;ACxEM,MAAM,KAAK,GAAG;AACnB,IAAA,QAAQ,EAAE,EAAE;AACZ,IAAA,QAAQ,EAAE,EAAE;IAEZ,cAAc,EAAE,UAAS,IAAgB,EAAA;QACvC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AACvB,QAAA,MAAM,aAAa,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;QAC/E,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAC,CAAC,EAAA;YAC/B,IAAI,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC1C,IAAI,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC1C,OAAO,KAAK,GAAG,KAAK,CAAC;AACvB,SAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC,QAAQ,CAAC;KACvB;IAED,cAAc,EAAE,UAAS,IAAgB,EAAA;QACvC,YAAY,CAAC,IAAI,CAAC,CAAC;QACnB,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;QACxD,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAC,CAAC,EAAA;YAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACjC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACjC,OAAO,KAAK,GAAG,KAAK,CAAC;AACvB,SAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC,QAAQ,CAAC;KACvB;CACF,CAAA;AAED,SAAS,YAAY,CAAC,IAAgB,EAAA;AACpC,IAAA,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC3B,IAAA,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAChC,IAAA,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9B,OAAO;AACT,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAgB,EAAA;AACxC,IAAAC,cAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC5B,IAAAA,cAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAChC,IAAAA,cAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC5B,IAAAA,cAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAChC,IAAAA,cAAY,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9B,OAAO;AACT,CAAC;AAED,SAASA,cAAY,CAAC,IAAY,EAAE,IAAgB,EAAA;IAClD,IAAI,GAAG,GAAiE,EAAE,CAAC;IAC3E,IAAI,OAAO,GAA4B,IAAI,CAAC,UAAsC,CAAC,MAAM,CAAC,SAAS,IACjG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,aAAa,IAAI,IAAI;AACnD,QAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5E,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACvC,QAAA,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;AACnF,QAAA,GAAG,GAAG,EAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;AACnD,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;AAC/E,YAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,SAAA;AACF,KAAA;IACD,OAAO;AACT,CAAC;AAED,SAAS,YAAY,CAAC,IAAY,EAAE,IAAgB,EAAA;IAClD,IAAI,GAAG,GAAiE,EAAE,CAAC;AAC3E,IAAA,QAAQ,IAAI;QACV,KAAK,MAAM,EAAE;AACX,YAAA,IAAI,KAAK,GAAwB,IAAI,CAAC,OAAO,CAAC;AAC9C,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC;gBACpC,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AACzC,gBAAA,GAAG,GAAG,EAAC,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;gBAClD,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE;AAC7D,oBAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,iBAAA;AACF,aAAA;YACD,MAAM;AACP,SAAA;QACD,KAAK,WAAW,EAAE;AAChB,YAAA,IAAI,UAAU,GAA6B,IAAI,CAAC,UAAU,CAAC;AAC3D,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAC1C,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;oBAClF,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClD,IAAI,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAC9C,oBAAA,GAAG,GAAG,EAAC,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;oBAC5D,IAAI,MAAM,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE;AAC7D,wBAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,qBAAA;AACF,iBAAA;AACF,aAAA;YACD,MAAM;AACP,SAAA;QACD,KAAK,SAAS,EAAE;YACd,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,IAAI,OAAO,IAAI,SAAS,EAAE;gBACxB,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAC5C,gBAAA,GAAG,GAAG,EAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;gBACxD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,IAAI,EAAE,EAAE;AAC7D,oBAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,iBAAA;AACF,aAAA;YACD,MAAM;AACP,SAAA;AACF,KAAA;IACD,OAAO;AACT;;ACnGO,MAAM,aAAa,GAAG;AAC3B,IAAA,GAAG,EAAE,UAAS,KAAY,EAAE,IAAgB,EAAA;QAC1C,IAAI,UAAU,GAAY,KAAK,CAAC;;AAEhC,QAAA,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACtE,YAAA,UAAU,GAAG,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1C,SAAA;AACD,QAAA,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;KACrC;CACD,CAAC;AAEF,SAAS,SAAS,CAAC,KAAY,EAAE,UAAmB,EAAE,IAAgB,EAAA;AACpE,IAAA,IAAI,MAAM,GAAW,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IACtE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC/B,QAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrB,OAAO;AACR,KAAA;AACD,IAAA,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC;AAClB,QAAA,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;QACpE,OAAO;AACR,KAAA;AAED,IAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,IAAA,IAAI,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,IAAI,SAAS,IAAI,SAAS,EAAE;QAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;AACnC,YAAA,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACzB,SAAA;AACF,KAAA;AACD,IAAA,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACtB,OAAO;AACT,CAAC;AAED,SAAS,cAAc,CAAC,KAAY,EAAE,IAAgB,EAAA;AACpD,IAAA,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;QACpD,OAAO;AACR,KAAA;AACD,IAAA,IAAI,KAAK,GAAwB,IAAI,CAAC,KAAK,CAAC;AAC5C,IAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,IAAA,IAAI,OAAO,GAAiB,IAAI,CAAC,OAAO,CAAC;;AAEzC,IAAA,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM;AACvD,QAAA,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;QACpD,IAAI,GAAG,GAAG,EAAC,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,EAAC,CAAC;AAC9E,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;AAC/C,YAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;AACD,IAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;AAC1B,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;AACD,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,QAAQ,CAAC,KAAY,EAAE,IAAgB,EAAA;;AAE9C,IAAA,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,IAAA,IAAI,IAAI,GAAkB,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,IAAI,IAAI,IAAI,SAAS,EAAE;QACrB,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,EAAE,EAAE;AAC/C,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;AACd,KAAA;AACD,IAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,IAAA,IAAI,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,IAAI,SAAS,IAAI,SAAS,EAAE;QAC1B,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,CAAC,IAAI,EAAE,EAAE;AACpD,YAAA,OAAO,IAAI,CAAC;AACb,SAAA;AAAM,aAAA;AACL,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;AACF,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf;;ACxEO,MAAM,WAAW,GAAG;IACzB,GAAG,EAAE,UAAS,IAAgB,EAAA;QAC5B,QAAQ,CAAC,IAAI,CAAC,CAAC;AAEf,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACvD,YAAA,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,IAAI,SAAS,IAAI,IAAI,EAAE;gBACrB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;gBAC1C,SAAS;AACV,aAAA;AACD,YAAA,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACpC,SAAA;QACD,OAAO;KACR;CACF,CAAA;AAED,SAAS,QAAQ,CAAC,IAAgB,EAAA;AAChC,IAAA,IAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;AACzC,IAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;AACrC,IAAA,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;AAChD,IAAA,IAAI,UAAU,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;QAC9E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;QACvD,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAChD,KAAA;IACD,OAAO;AACT,CAAC;AAED,SAAS,YAAY,CAAC,UAAuB,EAAE,aAAqB,EAAE,IAAgB,EAAA;IACpF,IAAI,OAAO,GAAW,CAAC,CAAC;IACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,EAAE,CAAC,EAAE;AACtC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC1C,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,YAAA,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE;gBAC9E,OAAO,IAAI,CAAC,CAAC;gBACb,MAAM;AACP,aAAA;AACF,SAAA;QACD,IAAI,OAAO,IAAI,CAAC;YAAE,MAAM;AACzB,KAAA;IACD,IAAI,OAAO,IAAI,aAAa;QAAE,OAAO;AAErC,IAAA,IAAI,OAAO,GAAW,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;AAC9C,IAAA,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAgB,CAAC;IAC1E,IAAI,MAAM,GAAG,EAAC,IAAI,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAC,CAAC;AAC5D,IAAA,IAAI,KAAK,GAAG,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC,IAAI,EAAE,EAAE,CAE7E;IACD,OAAO;AACT;;ACrDO,MAAM,WAAW,GAAG;;IAEzB,aAAa,EAAE,UAAU,KAAY,EAAA;AACnC,QAAA,IAAG,KAAK,CAAC,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AAChE,YAAA,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;AAClC,SAAA;AACD,QAAA,IAAG,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE;AAClE,YAAA,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;AACjC,SAAA;AACD,QAAA,OAAO,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC;KACjC;AAED,IAAA,UAAU,EAAE,UAAU,KAAY,EAAE,IAA2B,EAAA;AAC7D,QAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,IAAI,MAAM,GAAsB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAsB,CAAC;AAC9E,QAAA,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AACxE,YAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;YAClC,OAAO;AACR,SAAA;QACD,IAAI,GAAG,GAAW,CAAC,CAAC;QACpB,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAC9C,QAAA,QAAQ,GAAG;AACT,YAAA,KAAK,EAAE;AAAE,gBAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;gBAAC,MAAM;AAClD,YAAA,KAAK,gBAAgB;AAAE,gBAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAAC,MAAM;AACpD,SAAA;QACD,OAAO;KACR;AAED,IAAA,UAAU,EAAE,UAAS,KAAY,EAAE,IAAmC,EAAA;QACpE,IAAI,MAAM,GAA8B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AACjE,QAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;AAClC,QAAA,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AACxD,YAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;YAClC,OAAO;AACR,SAAA;QACD,IAAI,GAAG,GAAW,CAAC,CAAC;QACpB,IAAI,MAAM,YAAY,KAAK,EAAE;YAC3B,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC;AACjC,YAAA,QAAQ,GAAG;AACT,gBAAA,KAAK,EAAE;AAAE,oBAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;AAAC,oBAAA,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;oBAAC,MAAM;AAChF,gBAAA,KAAK,gBAAgB;AAAE,oBAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBAAC,MAAM;AACpD,aAAA;AACF,SAAA;AAAM,aAAA;YACL,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAC9C,YAAA,QAAQ,GAAG;AACT,gBAAA,KAAK,EAAE;AAAE,oBAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;oBAAC,MAAM;AAClD,gBAAA,KAAK,gBAAgB;AAAE,oBAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBAAC,MAAM;AACpD,aAAA;AACF,SAAA;QACD,OAAO;KACR;CACF;;AChDM,MAAM,YAAY,GAAG;IAC1B,GAAG,EAAE,UAAS,IAAgB,EAAA;QAC5B,UAAU,CAAC,IAAI,CAAC,CAAC;QAEjB,IAAI,YAAY,GAAgE,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC3G,IAAI,YAAY,GAAgE,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC3G,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACrD,YAAA,IAAI,OAAO,GAAU,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;gBACxC,SAAS;AACV,aAAA;YACD,IAAI,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACvD,YAAA,IAAI,OAAO,CAAC,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;AACxC,gBAAA,IAAI,aAAa,EAAE;oBACjB,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,aAAsC,CAAC,CAAC;AACxF,iBAAA;AAAM,qBAAA;oBACL,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAA;AAC9D,iBAAA;gBACD,SAAS;AACV,aAAA;AACD,YAAA,IAAI,aAAa,EAAE;AACjB,gBAAA,IAAI,YAAY,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;oBAChC,SAAS;AACV,iBAAA;AACD,gBAAA,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACpD,gBAAA,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;gBACzD,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;oBAC/B,YAAY,CAAC,KAAK,EAAE,CAAC;AACtB,iBAAA;AACF,aAAA;AAAM,iBAAA;AACL,gBAAA,IAAI,YAAY,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;oBAChC,SAAS;AACV,iBAAA;AACD,gBAAA,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACpD,gBAAA,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;gBACzE,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;oBAC/B,YAAY,CAAC,KAAK,EAAE,CAAC;AACtB,iBAAA;AACF,aAAA;AACF,SAAA;QACD,OAAO;KACR;CACF,CAAA;AAED,SAAS,UAAU,CAAC,IAAgB,EAAA;AAClC,IAAA,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,IAAI,EAAE;QACpD,OAAO;AACR,KAAA;AACD,IAAA,IAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;AACzC,IAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;AACrC,IAAA,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC3B,IAAA,IAAI,QAAQ,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE;QAC3E,OAAO;AACV,KAAA;IACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;AAErD,IAAA,IAAI,OAAO,GAAW,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;AAC5C,IAAA,IAAI,KAAK,GAAG,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,SAAS,GAAE,EAAC,CAAC,IAAI,EAAE,EAAE,CAEzF;IACD,OAAO;AACT;;ACrEO,MAAM,YAAY,GAAG;AAC1B,IAAA,GAAG,EAAE,UAAS,KAAY,EAAE,IAAgB,EAAA;AAC1C,QAAA,IAAG,KAAK,CAAC,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AAC9D,YAAA,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;AAChC,SAAA;AACD,QAAA,IAAG,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE;AAChE,YAAA,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;AAC/B,SAAA;AAED,QAAA,IAAG,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE;YACzB,SAAS,CAAC,KAAK,CAAC,CAAC;AAClB,SAAA;AAAM,aAAA;AACL,YAAAC,aAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1B,SAAA;KACH;CACD,CAAC;AAEF,SAAS,SAAS,CAAC,KAAY,EAAA;AAC7B,IAAA,IAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,gBAAgB,EAAE;QACrE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACrC,KAAA;IACD,OAAO;AACT,CAAC;AAED,SAASA,aAAW,CAAC,KAAY,EAAE,IAAgB,EAAA;IACjD,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;AAC7D,IAAA,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC;AACvC,IAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,IAAA,IAAI,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,IAAA,IAAI,SAAS,IAAI,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,SAAS,EAAE;QAC3E,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,CAAC,IAAI,gBAAgB,EAAE;AAClE,YAAA,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AACzB,SAAA;QACD,OAAO;AACR,KAAA;AAAM,SAAA;QACL,IAAI,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,IAAI,mBAAmB;AAC/F,YAAA,CAAC,CAAC,aAAa,IAAI,iBAAiB;YACpC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,SAAS,CAAC,CAAC;AACzC,QAAA,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;AAC1B,YAAA,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,IAAI,gBAAgB,EAAE;gBAClE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,aAAA;AACF,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,gBAAgB,EAAE;AAC7C,gBAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACtB,aAAA;AACF,SAAA;AACF,KAAA;IACD,OAAO;AACT;;AC9CO,MAAM,WAAW,GAAG;IACzB,GAAG,EAAE,UAAS,IAAgB,EAAA;QAC5B,WAAW,CAAC,IAAI,CAAC,CAAC;AAClB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACtD,YAAA,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,QAAQ,IAAI,IAAI,EAAE;gBACpB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;gBACzC,SAAS;AACV,aAAA;AACD,YAAA,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClC,SAAA;QACD,OAAO;KACR;CACF,CAAA;AAED,SAAS,WAAW,CAAC,IAAgB,EAAA;AACnC,IAAA,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,IAAI,EAAE;QACpD,OAAO;AACR,KAAA;AACD,IAAA,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjD,IAAA,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE;QAClD,YAAY,GAAG,CAAC,CAAC;AAClB,KAAA;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,YAAY,EAAE;QACjD,OAAO;AACR,KAAA;IACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;AACtD,IAAA,IAAI,OAAO,GAAW,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7C,IAAA,IAAI,KAAK,GAAG,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,UAAU,EAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAEzF;IACD,OAAO;AACT;;ACrCO,MAAM,WAAW,GAAG;AACzB,IAAA,GAAG,EAAE,UAAU,KAAY,EAAE,IAAgB,EAAA;AAC3C,QAAA,IAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AAC7D,YAAA,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC/B,SAAA;AAAM,aAAA,IAAG,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE;AACtE,YAAA,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,SAAA;AAED,QAAA,IAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE;AACxB,YAAA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACtB,SAAA;AAAM,aAAA;AACL,YAAAA,aAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1B,SAAA;KACH;CACD,CAAC;AAEF,SAAS,OAAO,CAAC,KAAY,EAAE,IAAgB,EAAA;AAC7C,IAAA,IAAI,KAAK,GAA2B,IAAI,CAAC,KAAK,CAAC;IAC/C,IAAI,MAAM,GAAqB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,IAAA,IAAG,MAAM,EAAE;QACT,IAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,gBAAgB,EAAE;AAC1C,YAAA,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC;AACjE,SAAA;AACF,KAAA;IACD,OAAO;AACT,CAAC;AAED,SAASA,aAAW,CAAC,KAAY,EAAE,IAAgB,EAAA;IACjD,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;;AAE7D,IAAA,IAAI,KAAK,CAAC,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;QACtC,IAAI,WAAW,GAAsB,IAAI,CAAC;AAC1C,QAAA,IAAI,IAAI,CAAC,OAAO,IAAI,SAAS;AACzB,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,SAAS,EAAE;YACxE,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChD,SAAA;aAAM,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;AAC1C,YAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,UAAU,EAAE,EAAC,MAAM,EAAE,KAAK,IACnE,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,SAAS,EAAC,CAAC,CAAC;AAC/C,SAAA;QACD,IAAI,WAAW,IAAI,IAAI,EAAE;AACvB,YAAA,IAAI,OAAO,GAAW,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,gBAAgB,EAAE;AAC9C,gBAAA,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACvB,aAAA;YACD,OAAO;AACR,SAAA;;QAED,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,WAAW,CAAC,EAAE,CAAC;AAC7C,KAAA;AAED,IAAA,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAsB,CAAC;AACjF,IAAA,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,SAAS,EAAE;AAC/D,QAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,OAAO;AACR,KAAA;IACD,IAAI,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAClD,IAAA,QAAQ,GAAG;AACT,QAAA,KAAK,gBAAgB;AAAE,YAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAAC,MAAM;AACnD,QAAA,KAAK,EAAE;AAAE,YAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;YAAC,MAAM;AACnD,KAAA;IACD,OAAO;AACT;;AC9DO,MAAM,YAAY,GAAG;AAC1B,IAAA,GAAG,EAAE,UAAS,KAAY,EAAE,IAAgB,EAAA;AAC1C,QAAA,IAAG,KAAK,CAAC,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;AAC9D,YAAA,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;AAC/B,YAAA,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;AAC9B,SAAA;AAAM,aAAA,IAAG,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE;AACvE,YAAA,KAAK,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;AAC/B,SAAA;AAED,QAAA,IAAI,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE;AAC1B,YAAA,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACvB,SAAA;AAAM,aAAA;AACL,YAAA,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1B,SAAA;KACF;CACF,CAAA;AAED,SAAS,QAAQ,CAAC,KAAY,EAAE,IAAgB,EAAA;;AAE9C,IAAA,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACjE,IAAI,YAAY,IAAI,IAAI,IAAI,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,EAAE;QACpE,IAAI,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,gBAAgB,EAAE;AAClD,YAAA,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AAC5B,SAAA;QACD,OAAO;AACR,KAAA;IACD,IAAI,OAAO,GAAmB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,MAAM,IAC1E,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAChC,IAAI,QAAQ,GAAmB,EAAE,CAAC;;AAElC,IAAA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,EAAC;AAC1B,QAAA,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,IAAI,SAAS,CAAC,aAAa,IAAI,cAAc,CAAC,CAAC;AACnF,KAAA;AAAM,SAAA;QACL,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;AACnD,KAAA;IACD,KAAK,CAAC,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;QACjD,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,KAAA;IACD,OAAO;AACT,CAAC;AAED,SAAS,WAAW,CAAC,KAAY,EAAE,IAAgB,EAAA;IACjD,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;;AAE7D,IAAA,IAAI,KAAK,CAAC,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;QACtC,IAAI,WAAW,GAAsB,IAAI,CAAC;AAC1C,QAAA,IAAI,IAAI,CAAC,OAAO,IAAI,SAAS;AACzB,YAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,SAAS,EAAE;YACxE,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChD,SAAA;aAAM,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,SAAS,EAAE;AAC1C,YAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,UAAU,EAAE,EAAC,MAAM,EAAE,KAAK,IACnE,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,SAAS,EAAC,CAAC,CAAC;AAC/C,SAAA;QACD,IAAI,WAAW,IAAI,IAAI,EAAE;AACvB,YAAA,IAAI,OAAO,GAAW,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;gBACjD,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,aAAA;YACD,OAAO;AACR,SAAA;;QAED,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,WAAW,CAAC,EAAE,CAAC;AAC7C,KAAA;AAED,IAAA,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAsB,CAAC;AACjF,IAAA,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,SAAS,EAAE;AAC/D,QAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,OAAO;AACR,KAAA;IACD,IAAI,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAClD,IAAA,QAAQ,GAAG;AACT,QAAA,KAAK,gBAAgB;AAAE,YAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAAC,MAAM;AACnD,QAAA,KAAK,EAAE;AAAE,YAAA,KAAK,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;YAAC,MAAM;AACnD,KAAA;IACD,OAAO;AACT;;ACvEO,MAAM,SAAS,GAAG;IACvB,GAAG,EAAE,UAAS,IAAgB,EAAA;QAC5B,UAAU,CAAC,IAAI,CAAC,CAAC;AAEjB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACrD,YAAA,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;gBACxC,SAAS;AACV,aAAA;AACD,YAAA,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;AAC1B,gBAAA,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACjC,aAAA;AAAM,iBAAA;AACL,gBAAA,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAChC,aAAA;AACF,SAAA;QACD,OAAO;KACR;CACF,CAAA;AAED,SAAS,UAAU,CAAC,IAAgB,EAAA;AAClC,IAAA,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,IAAI,EAAE;QACpD,OAAO;AACR,KAAA;AACD,IAAA,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;AACrC,IAAA,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,IAAA,IAAI,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;QAC9C,OAAO;AACR,KAAA;IACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;AACrD,IAAA,IAAI,OAAO,GAAW,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;AAC5C,IAAA,IAAI,KAAK,GAAG,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,KAAK,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,SAAS,EAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAEvF;IACD,OAAO;AACT;;ACrCO,MAAM,UAAU,GAAG;IACxB,GAAG,EAAE,UAAS,IAAgB,EAAA;QAC5B,WAAW,CAAC,IAAI,CAAC,CAAC;AAClB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACtD,YAAA,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;YAC3D,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;gBACzC,SAAS;AACV,aAAA;AACD,YAAA,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACjC,SAAA;QACD,OAAO;KACR;CACF,CAAA;AAED,SAAS,WAAW,CAAC,IAAgB,EAAA;AACnC,IAAA,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,IAAI,EAAE;QACpD,OAAO;AACR,KAAA;AACD,IAAA,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;AACvC,IAAA,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACjC,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;QACnD,OAAO;AACR,KAAA;IACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;AACtD,IAAA,IAAI,OAAO,GAAW,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7C,IAAA,IAAI,KAAK,GAAG,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;IACpD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,UAAU,EAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAEzF;IACD,OAAO;AACT;;ACpCO,MAAM,YAAY,GAAG;AAC1B,IAAA,MAAM,EAAE,UAAS,EAAyB,EAAE,OAAgB,EAAE,IAAa,EAAA;AACzE,QAAA,IAAI,OAAO,EAAE;YACX,IAAI,OAAO,GAAG,EAAe,CAAC;AAC9B,YAAA,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,GAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;gBACvC,OAAO;AACR,aAAA;AACD,YAAA,QAAQ,IAAI;AACV,gBAAA,KAAK,WAAW;oBAAE,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAAC,MAAK;AAC9D,gBAAA,KAAK,SAAS;oBAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAAC,MAAM;AAC3D,gBAAA,KAAK,SAAS;oBAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAAC,MAAK;AAC1D,gBAAA,KAAK,UAAU;oBAAE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAAC,MAAK;AAC5D,gBAAA,KAAK,UAAU;oBAAE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAAC,MAAK;AAC7D,aAAA;AACF,SAAA;KACF;CACF;;ACdM,MAAM,cAAc,GAAG;IAC5B,YAAY,EAAE,UAAS,IAAgB,EAAA;AACrC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAC3C,YAAA,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,YAAA,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,EAAE;AAC1B,gBAAA,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;gBAC7D,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;gBACxE,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACrC,aAAA;AACF,SAAA;QACD,OAAO;KACR;CACF;;ACdD;AAgBA,aAAa,CAAC,OAAO,EAAE,CAAC;AACX,MAAA,IAAI,GAAG,YAAA;AAClB,IAAA,IAAG,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,KAAK,EAAE;AAC3B,QAAA,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;AAC1B,KAAA;;AAED,IAAA,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE;QACxB,aAAa,CAAC,OAAO,EAAE,CAAC;AACzB,KAAA;AACD,IAAA,KAAK,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;QAC7B,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC9B,QAAA,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;;AAElC,QAAA,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACtB,QAAA,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvB,QAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACpB,QAAA,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACtB,QAAA,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;;AAGrB,QAAA,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YAChC,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtC,QAAQ,SAAS,CAAC,aAAa;AAC7B,gBAAA,KAAK,eAAe;AAAG,oBAAA,cAAc,CAAC,GAAG,CAAC,SAA2B,CAAC,CAAC;oBAAC,MAAM;AAC9E,gBAAA,KAAK,cAAc;AAAG,oBAAA,aAAa,CAAC,GAAG,CAAC,SAA0B,EAAE,IAAI,CAAC,CAAC;oBAAC,MAAM;AAClF,aAAA;AACF,SAAA;AACF,KAAA;IACD,OAAO;AACT;;;;"}