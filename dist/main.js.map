{"version":3,"file":"main.js","sources":["../src/global/GlobalStructure.ts","../src/global/GlobalAutoSites.ts","../src/global/GlobalRole.ts","../src/global/RefreshGlobal.ts","../src/MyMemory/MemoryDelete.ts","../src/MyMemory/MemoryRoles.ts","../src/MyMemory/MemoryRefresh.ts","../src/Structure/StructureLink.ts","../src/Structure/StructureTower.ts","../src/NewCreep/NewCreepBodys.ts","../src/Role/RoleHarvester.ts","../src/Role/RoleTransfer.ts","../src/Tasks/HarvestTask.ts","../src/Role/RoleUpgrader.ts","../src/Tasks/UpgradeTask.ts","../src/Role/RoleBuilder.ts","../src/Tasks/BuildTask.ts","../src/Role/RoleRepairer.ts","../src/Tasks/RepairTask.ts","../src/Role/CreepPototype.ts","../src/main.ts"],"sourcesContent":["export const globalStructure: GlobalStructure = {\r\n  sources: Object.values(Game.rooms)[0].find(FIND_SOURCES),\r\n  structures: Object.values(Game.rooms)[0].find(FIND_STRUCTURES),\r\n  sites: Object.values(Game.rooms)[0].find(FIND_CONSTRUCTION_SITES),\r\n  containers: Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_CONTAINER}),\r\n  links: Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_LINK}),\r\n  fromLinks: creatLinks('from'),\r\n  toLinks: creatLinks('to'),\r\n\r\n  refresh: function() {\r\n    globalStructure.structures = Game.spawns.Spawn1.room.find(FIND_STRUCTURES);\r\n    globalStructure.containers = globalStructure.structures.filter(structure => \r\n      structure.structureType == STRUCTURE_CONTAINER) as StructureContainer[];\r\n    globalStructure.links = globalStructure.structures.filter(structure => \r\n      structure.structureType == STRUCTURE_LINK) as StructureLink[];\r\n    this.fromLinks = creatLinks('from');\r\n    this.toLinks = creatLinks('to');\r\n  }\r\n}\r\n\r\nfunction creatLinks(context: string): StructureLink[] {\r\n  let from: StructureLink[] = [];\r\n  let to: StructureLink[]= [];\r\n  let links: StructureLink[] = Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_LINK});\r\n  let sources = Object.values(Game.rooms)[0].find(FIND_SOURCES);\r\n  for (let i = 0; i < links.length; ++i) {\r\n    if (links[i].pos.findInRange(sources, 3)[0] != undefined) {\r\n      from.push(links[i]);\r\n    } else {\r\n      to.push(links[i]);\r\n    }\r\n  }\r\n  switch (context) {\r\n    case 'from': return from;\r\n    case 'to': return to;\r\n  }\r\n  return [];\r\n}","import { globalStructure } from \"./GlobalStructure\";\r\n\r\nexport const globalAutoSites = {\r\n  run: function() {\r\n    creatContainerSites();\r\n  }\r\n}\r\n\r\nfunction creatContainerSites() {\r\n  for (let i = 0; i < globalStructure.sources.length; ++i) {\r\n    let containers = globalStructure.sources[i].pos.findInRange(globalStructure.containers, 1);\r\n    if (containers[0] != undefined) {\r\n      continue;\r\n    } else {\r\n      let sites = globalStructure.sources[i].pos.findInRange(FIND_CONSTRUCTION_SITES, 1);\r\n      if (sites[0] != undefined) {\r\n        continue;\r\n      }\r\n    }\r\n    let path: PathStep[] = Game.spawns.Spawn1.pos.findPathTo(globalStructure.sources[i], {ignoreCreeps: true});\r\n    let posX = path[path.length - 2].x;\r\n    let posY = path[path.length - 2].y;\r\n    let pos = new RoomPosition(posX, posY, Game.spawns.Spawn1.room.name);\r\n    pos.createConstructionSite(STRUCTURE_CONTAINER);\r\n  }\r\n  let contronller: StructureController = Object.values(Game.rooms)[0].controller;\r\n  let containers = contronller.pos.findInRange(globalStructure.containers, 1);\r\n  let sites: ConstructionSite[] = contronller.pos.findInRange(FIND_MY_CONSTRUCTION_SITES, 2);\r\n  if (containers[0] == undefined && sites[0] == undefined) {\r\n    let path: PathStep[] = Game.spawns.Spawn1.pos.findPathTo(contronller);\r\n    let posX = path[path.length - 3].x;\r\n    let posY = path[path.length - 3].y;\r\n    let pos = new RoomPosition(posX, posY, Game.spawns.Spawn1.room.name);\r\n    pos.createConstructionSite(STRUCTURE_CONTAINER);\r\n  }\r\n}","export const globalRole = {\r\n  // transfer\r\n  transferTarget: [],\r\n  refresh: function() {\r\n    this.transferTarget = [];\r\n  }\r\n}","import { globalStructure } from './GlobalStructure';\r\nimport { globalAutoSites } from './GlobalAutoSites';\r\nimport { globalRole } from './GlobalRole';\r\n/**\r\n * @file to refresh global veriables\r\n * @author LazyKitty\r\n */\r\nexport const refreshGlobal = function() {\r\n  // GlobalStructure.ts\r\n  if (Game.spawns.Spawn1 != undefined) {\r\n    globalStructure.refresh();\r\n    globalAutoSites.run();\r\n    globalRole.refresh();\r\n  }\r\n}","export const memoryDelete = {\r\n  deleteDead: function() {\r\n    // delete dead creeps\r\n    for(let name in Memory.creeps) {\r\n      if(!Game.creeps[name]) {\r\n        delete Memory.creeps[name];\r\n      }\r\n    }\r\n  }\r\n}\r\n","export const memoryRoles = {\r\n  refresh: function() {\r\n    let roles = returnIds();\r\n    Memory.roles = {\r\n      harvesters: roles.harvester,\r\n      transfers: roles.transfer,\r\n      upgraders: roles.upgrader,\r\n      builders: roles.builder,\r\n      repaiers: roles.repairer,\r\n    }\r\n  }\r\n}\r\n\r\nfunction returnIds() {\r\n  let roles = {\r\n    harvester: [],\r\n    transfer: [],\r\n    upgrader: [],\r\n    builder: [],\r\n    repairer: [],\r\n  }\r\n  for (let name in Game.creeps) {\r\n    let creep = Game.creeps[name];\r\n    if (creep.memory.role != undefined) {\r\n      roles[creep.memory.role].push(creep.id);\r\n    }\r\n  }\r\n  return roles;\r\n}","import { memoryDelete } from \"./MemoryDelete\"\r\nimport { memoryRoles } from \"./MemoryRoles\";\r\n\r\nexport const memoryRefresh = {\r\n  refresh: function() {\r\n    memoryDelete.deleteDead();\r\n    memoryRoles.refresh();\r\n  }\r\n}","import { globalStructure } from \"@/global/GlobalStructure\"\r\n\r\nexport const structureLink = {\r\n  run: function(link: StructureLink): void {\r\n    for (let i = 0; i < globalStructure.fromLinks.length; ++i) {\r\n      if (globalStructure.fromLinks[i].id == link.id) {\r\n        transfer(link);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction transfer(link: StructureLink): void {\r\n  if (link.store[RESOURCE_ENERGY] >= 100) {\r\n    for (let i = 0; i < globalStructure.toLinks.length; ++i) {\r\n      let energy = Game.getObjectById(globalStructure.toLinks[i].id).store.getFreeCapacity(RESOURCE_ENERGY);\r\n      if (energy > 10) {\r\n        link.transferEnergy(Game.getObjectById(globalStructure.toLinks[i].id));\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}","export const structureTower = {\r\n  run: function (tower: StructureTower): void {\r\n    let enemy: Creep[] = tower.room.find(FIND_HOSTILE_CREEPS);\r\n    let injured: Creep[] = tower.room.find(FIND_MY_CREEPS, {filter :\r\n      (creeps) => creeps.hits < creeps.hitsMax && creeps.room == creeps.room});\r\n    if (enemy[0] != undefined) {\r\n      goAttack(tower, enemy);\r\n    } else if (injured[0] != undefined) {\r\n      tower.heal(injured[0]);\r\n    } else {\r\n      runRepair(tower);\r\n    }\r\n  }\r\n};\r\n\r\nfunction goAttack(tower: StructureTower, enemy: Creep[]): void {\r\n  let target: Creep = tower.pos.findClosestByRange(enemy);\r\n  tower.attack(target);\r\n}\r\n\r\nfunction runRepair (tower: StructureTower): void {\r\n  let targetTo: AnyStructure[] = tower.room.find(FIND_STRUCTURES, {\r\n    filter: object => object.hits < object.hitsMax &&\r\n    object.structureType != STRUCTURE_WALL});\r\n  tower.repair(targetTo[0]);\r\n}","export const newCreepBody = function(role: String): BodyPartConstant[] {\r\n  // MOVE 50,WORK 100,CARRY 50,ATTACK 80,RANGED_ATTACK 150,HEAL 250,CLAIM 600,TOUGH 10\r\n  let capacity: number = Game.spawns.Spawn1.room.energyCapacityAvailable;\r\n  if (capacity == 300 || Object.getOwnPropertyNames(Memory.creeps).length < 7 ) {\r\n    switch (role) {\r\n      case 'harvester' : return [WORK, CARRY, MOVE];\r\n      case 'upgrader' : return [WORK, CARRY, MOVE];\r\n      case 'builder' : return [WORK, CARRY, MOVE, MOVE];\r\n      case 'transfer' : return [CARRY, MOVE];\r\n      case 'repairer' : return [WORK, CARRY, MOVE, MOVE];\r\n    }\r\n  } else {\r\n    switch (role) {\r\n      case 'harvester' : {\r\n        let bodys: BodyPartConstant[] = [CARRY];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length >= 7) {\r\n            if (capacity >= 2) {\r\n              bodys.push(WORK);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'upgrader' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        capacity /= 50;\r\n        bodys.push(WORK, CARRY, MOVE);\r\n        capacity -= 4;\r\n        for (; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'builder' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 4; capacity -= 4) {\r\n          bodys.push(WORK, CARRY, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'transfer' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 2; capacity -= 2) {\r\n          bodys.push(MOVE, CARRY);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'repairer' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, CARRY, MOVE, MOVE);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n    }\r\n  }\r\n}","import { globalStructure } from \"../global/GlobalStructure\";\n\nexport const roleHarvester = {\n  run: function(creep: Creep): void {\n    let transfered: boolean = false;\n    if (creep.store.getFreeCapacity() < creep.getActiveBodyparts(WORK) * 2) {\n      transfered = transferEnergy(creep);\n    }\n    goHarvest(creep, transfered);\n\t}\n};\n\nfunction goHarvest(creep: Creep, transfered: boolean): void {\n  let source: Source = globalStructure.sources[creep.memory.sourcesPosition];\n  if (!creep.pos.isNearTo(source)) {\n    creep.moveTo(source);\n    return;\n  }\n  if (source.energy == 0 || \n      creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0 && !transfered) {\n    return;\n  }\n  let container: StructureContainer[] = creep.pos.findInRange(globalStructure.containers, 1);\n  if (container[0] != undefined) {\n    if (!creep.pos.isEqualTo(container[0])) {\n      creep.moveTo(container[0]);\n    }\n  }\n  creep.harvest(source);\n}\n\nfunction transferEnergy(creep: Creep): boolean {\n  let links: StructureLink[] = globalStructure.links;\n  let containers: StructureContainer[] = globalStructure.containers;\n  let sources: Source[] = globalStructure.sources;\n  if (links.length == 0 && containers.length < sources.length &&\n      creep.pos.findInRange(containers, 1).length == 0) {\n    creep.transferTo(creep);\n    return false;\n  }\n  if (!transfer(creep)) {\n    return false;\n  }\n  return true;\n}\n\nfunction transfer(creep: Creep): boolean {\n  let link: StructureLink = creep.pos.findInRange(globalStructure.fromLinks, 1)[0];\n  if (link != undefined) {\n    let targetLink: StructureLink = Game.getObjectById(link.id);\n    if (creep.transfer(targetLink, RESOURCE_ENERGY) == OK) {\n      return true;\n    }\n    return false;\n  }\n  let source: Source = globalStructure.sources[creep.memory.sourcesPosition];\n  let container: StructureContainer = globalStructure.containers.filter(structure =>\n    structure.pos.isNearTo(source))[0];\n  if (container != undefined) {\n    if (creep.transfer(container, RESOURCE_ENERGY) == OK) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n}","import { globalRole } from \"../global/GlobalRole\";\r\nimport { globalStructure } from \"../global/GlobalStructure\";\r\n\r\nexport const roleTransfer = {\r\n  run: function(creep: Creep): void {\r\n    if(creep.memory.transfering && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.transfering = false;\r\n    }\r\n    if(!creep.memory.transfering && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.transfering = true;\r\n    }\r\n    \r\n    if (creep.memory.transfering) {\r\n      goTransfer(creep);\r\n    } else {\r\n      let links: StructureLink[] = globalStructure.links;\r\n      let containers: StructureContainer[] = globalStructure.containers;\r\n      let sources: Source[] = globalStructure.sources;\r\n      if (links.length == 0 && containers.length < sources.length &&\r\n          sources[creep.memory.sourcesPosition].pos.findInRange(containers, 1).length == 0) {\r\n        goWithdrawCreep(creep);\r\n      } else {\r\n        goWithdraw(creep);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction goTransfer(creep: Creep): void {\r\n  let structures: AnyStructure[] = creep.room.find(FIND_STRUCTURES);\r\n  let target: AnyStructure[] = structures.filter(structure => \r\n    (structure.structureType == STRUCTURE_EXTENSION ||\r\n    structure.structureType == STRUCTURE_SPAWN) &&\r\n    structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0 );\r\n  if (target[0] != undefined) {\r\n    let temp: AnyStructure = creep.pos.findInRange(target, 3)[0];\r\n    if (temp != undefined) {\r\n      target[0] = temp;\r\n    }\r\n    if (creep.transfer(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(target[0]);\r\n    }\r\n    return;\r\n  }\r\n\r\n  target = structures.filter(structure => \r\n    (structure.structureType == STRUCTURE_TOWER) &&\r\n    structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n  if (target[0] != undefined) {\r\n    let temp: AnyStructure = creep.pos.findInRange(target, 6)[0];\r\n    if (temp != undefined) {\r\n      target[0] = temp;\r\n    }\r\n    if (creep.transfer(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(target[0]);\r\n    }\r\n    return;\r\n  }\r\n\r\n  target = structures.filter(structure =>\r\n    ((structure.structureType == STRUCTURE_CONTAINER &&\r\n    structure.pos.findInRange(globalStructure.sources, 1)[0] == undefined) ||\r\n    structure.structureType == STRUCTURE_STORAGE) &&\r\n    structure.store.getFreeCapacity(RESOURCE_ENERGY) >= creep.store[RESOURCE_ENERGY]);\r\n  if (creep.transfer(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(target[0]);\r\n  }\r\n}\r\n\r\nfunction goWithdrawCreep(creep: Creep) {\r\n  let source = globalStructure.sources[creep.memory.sourcesPosition];\r\n  if (globalRole.transferTarget[0] != undefined) {\r\n    let target: Creep[] = source.pos.findInRange(FIND_CREEPS, 1, {filter: creep=>\r\n      creep.memory.role == 'harvester'});\r\n    if (target != undefined) {\r\n      let targetId: number = globalRole.transferTarget.indexOf(target[0].id);\r\n      creep.memory.transferTarget = globalRole.transferTarget[targetId];\r\n    }\r\n  }\r\n  if (Game.getObjectById(creep.memory.transferTarget) != null) {\r\n    let res: number = creep.transferTo(Game.getObjectById(creep.memory.transferTarget), creep);\r\n    if (res == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(Game.getObjectById(creep.memory.transferTarget));\r\n      return;\r\n    } else if (res == OK) {\r\n      creep.memory.transferTarget = undefined;\r\n    }\r\n  }\r\n  if (creep.pos.getRangeTo(source) > 2) {\r\n    creep.moveTo(source);\r\n    return;\r\n  }\r\n}\r\n\r\nfunction goWithdraw(creep: Creep): void {\r\n  let resources = creep.room.find(FIND_DROPPED_RESOURCES);\r\n  if (resources[0] != undefined) {\r\n    if (creep.pickup(resources[0]) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(resources[0]);\r\n    }\r\n    return;\r\n  }\r\n  if (globalStructure.toLinks.length > 0 && \r\n      creep.memory.sourcesPosition.findInRange(globalStructure.fromLinks, 1).length != 0) {\r\n    let link = Game.getObjectById(globalStructure.toLinks[0].id);\r\n    if (link != null && link.store[RESOURCE_ENERGY] >= 100) {\r\n      if (creep.withdraw(link, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(link);\r\n      }\r\n      return;\r\n    }\r\n  }\r\n  let targetSource: Source = globalStructure.sources[creep.memory.sourcesPosition];\r\n  let targetContainer: StructureContainer = targetSource.pos.findInRange(globalStructure.containers, 1)[0];\r\n  if (targetContainer == null || \r\n      targetContainer.store[RESOURCE_ENERGY] <= creep.store.getFreeCapacity(RESOURCE_ENERGY)) {\r\n    targetContainer = globalStructure.containers.filter(target => \r\n      target.pos.findInRange(globalStructure.sources, 1)[0] != undefined && \r\n      Game.getObjectById(target.id).store[RESOURCE_ENERGY] >= creep.store.getFreeCapacity(RESOURCE_ENERGY))[0];\r\n    if (targetContainer == undefined) {\r\n      targetContainer = creep.pos.findClosestByPath(FIND_STRUCTURES, {filter:\r\n        (structure) => (structure.structureType == STRUCTURE_CONTAINER ||\r\n        structure.structureType == STRUCTURE_STORAGE)&&\r\n        structure.store[RESOURCE_ENERGY] >= creep.store.getFreeCapacity(RESOURCE_ENERGY)\r\n        });\r\n    }\r\n  }\r\n  if (creep.withdraw(targetContainer, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(targetContainer);\r\n  }\r\n}","import { globalStructure } from \"../global/GlobalStructure\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleHarvester } from \"../Role/RoleHarvester\";\r\nimport { roleTransfer } from \"../Role/RoleTransfer\";\r\n\r\nexport const harvestTask = {\r\n  run: function(): void {\r\n    newCreep();\r\n\r\n    for (let i = 0; i < Memory.roles.harvesters.length; ++i) {\r\n      roleHarvester.run(Game.getObjectById(Memory.roles.harvesters[i]));\r\n    }\r\n    for (let i = 0; i < Memory.roles.transfers.length; ++i) {\r\n      roleTransfer.run(Game.getObjectById(Memory.roles.transfers[i]));\r\n    }\r\n  }\r\n}\r\n\r\nfunction newCreep(): void {\r\n  let harvesters = Memory.roles.harvesters;\r\n  let transfers = Memory.roles.transfers;\r\n  let sources = globalStructure.sources;\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = null;\r\n  if (harvesters.length <= transfers.length && harvesters.length < sources.length) {\r\n    Game.spawns['Spawn1'].memory.shouldSpawn = 'harvester';\r\n    newHarvester(harvesters);\r\n  } else if (harvesters.length > transfers.length && transfers.length < sources.length) {\r\n    Game.spawns['Spawn1'].memory.shouldSpawn = 'transfer';\r\n    newTransfer(transfers);\r\n  }\r\n}\r\n\r\nfunction newHarvester(harvesters: Id<Creep>[]): void{\r\n  let newName: string = \"Harvester\" + Game.time;\r\n  let sourcesLength: number = globalStructure.sources.length;\r\n  let posFlag: number = 0;\r\n  for (let i = 0; i < sourcesLength; ++i) {\r\n    for (let j = 0; j < harvesters.length; ++j) {\r\n      if (i == Game.getObjectById(harvesters[j]).memory.sourcesPosition) {\r\n        posFlag += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (posFlag == i) break;\r\n  }\r\n  if (posFlag >= sourcesLength) return;\r\n\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('harvester'),\r\n    newName, {memory:{role: 'harvester', sourcesPosition: posFlag}});\r\n}\r\n\r\nfunction newTransfer(transfers: Id<Creep>[]): void{\r\n  let newName: string = 'Transfer' + Game.time;\r\n  let sourcesLength: number = globalStructure.sources.length;\r\n  let posFlag: number = 0;\r\n  for (let i = 0; i < sourcesLength; ++i) {\r\n    for (let j = 0; j < transfers.length; ++j) {\r\n      if (Game.getObjectById(transfers[j]).memory.sourcesPosition == i) {\r\n        posFlag += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (posFlag == i) break;\r\n  }\r\n  if (posFlag >= sourcesLength) return;\r\n\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('transfer'), newName, {memory: {\r\n    role: 'transfer', sourcesPosition: posFlag,}});\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\n\nexport const roleUpgrader = {\n  run: function(creep: Creep): void {\n    if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.upgrading = false;\n    }\n    if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {\n      creep.memory.upgrading = true;\n    }\n\n    if(creep.memory.upgrading) {\n      goUpgrade(creep);\n    } else {\n      goGetEnergy(creep);\n    }\n\t}\n};\n\nfunction goUpgrade(creep: Creep): void {\n  if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(creep.room.controller);\n  }\n}\n\nfunction goGetEnergy(creep: Creep): void {\n  let targetContainer: AnyStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, {filter :\n    (structure) => (structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_STORAGE) &&\n    structure.store[RESOURCE_ENERGY] > 0});\n  if (targetContainer == undefined) {\n    let target: Source = globalStructure.sources.filter(source => source.energy > 0)[0];\n    if (creep.harvest(target) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(target);\n    }\n  } else if (creep.withdraw(targetContainer, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(targetContainer);\n  }\n}","import { roleUpgrader } from \"@/Role/RoleUpgrader\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\n\r\nexport const upgradeTask = {\r\n  run: function() {\r\n    let upgraders = Memory.roles.upgraders;\r\n    if (Memory.roles.upgraders.length < 1) {\r\n      newUpgrader();\r\n    }\r\n    for (let i = 0; i < upgraders.length; ++i) {\r\n      roleUpgrader.run(Game.getObjectById(upgraders[i]));\r\n    }\r\n  }\r\n}\r\n\r\nfunction newUpgrader() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'upgrader';\r\n  let newName: string = 'Upgrader' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('upgrader'), newName, {\r\n    memory: {role: 'upgrader'}});\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\n\nexport const roleBuilder = {\n  run: function (creep: Creep): void {\n    if (backRoom(creep) == 0) {\n      return;\n    }\n    if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.building = false;\n    } else if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {\n      creep.memory.building = true;\n    }\n\n    if(creep.memory.building) {\n      goBuild(creep);\n    } else {\n      goGetEnergy(creep);\n    }\n\t}\n};\n\nfunction backRoom(creep: Creep): number {\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\n    return 0;\n  } else {\n    return -1;\n  }\n}\n\nfunction goBuild(creep: Creep): void {\n  let target: ConstructionSite[] = creep.room.find(FIND_CONSTRUCTION_SITES);\n    if(target[0]) {\n      if (creep.store[RESOURCE_ENERGY] < creep.store.getCapacity(RESOURCE_ENERGY) / 2 &&\n        !creep.pos.inRangeTo(target[0], 10)){\n        creep.memory.building = false;\n        return;\n      }\n      if(creep.build(target[0]) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(target[0], {visualizePathStyle: {stroke: '#ffffff'}});\n      }\n    }\n}\n\nfunction goGetEnergy(creep: Creep): void {\n  let targetStore: AnyStoreStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, \n    {filter: (structure) => {return (structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_STORAGE) &&\n    structure.store[RESOURCE_ENERGY] > 0}});\n\n  if (targetStore != null) {\n    if (creep.withdraw(targetStore, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(targetStore);\n    }\n    return;\n  }\n  let sources: Source[] = globalStructure.sources.filter(source => source.energy > 0);\n  if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n    if (creep.moveTo(sources[0]) == ERR_NO_PATH) {\n      if (creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(sources[1]);\n      }\n    }\n  }\n  return;\n}","import { roleBuilder } from \"../Role/RoleBuilder\";\r\nimport { globalStructure } from \"../global/GlobalStructure\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\n\r\nexport const buildTask = {\r\n  run: function() {\r\n    let builders: Id<Creep>[] = Memory.roles.builders;\r\n    let sites: ConstructionSite[] = globalStructure.sites;\r\n    if (sites.length > 0 && builders.length < 1) {\r\n      newBuilder();\r\n    }\r\n    for (let i = 0; i < builders.length; ++i) {\r\n      roleBuilder.run(Game.getObjectById(builders[i]));\r\n    }\r\n  }\r\n}\r\n\r\nfunction newBuilder() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'builder';\r\n  let newName: string = 'Builder' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('builder'), newName, {\r\n    memory: {role: 'builder'}});\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\r\n\r\nexport const roleRepairer = {\r\n  run: function(creep: Creep): void {\r\n    if(creep.memory.repairing && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n    } else if(!creep.memory.repairing && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.repairing = true;\r\n    }\r\n\r\n    if (creep.memory.repairing) {\r\n      goRepair(creep);\r\n      backRoom(creep);\r\n    } else {\r\n      goGetEnergy(creep);\r\n    }\r\n  }\r\n}\r\n\r\nfunction backRoom(creep: Creep): void {\r\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\r\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\r\n  }\r\n}\r\n\r\nfunction goRepair(creep: Creep): void {\r\n  if (global.repairerTarget != null && \r\n      global.repairerTarget.hits < global.repairerTarget.hitsMax) {\r\n    if ((Game.getObjectById(global.repairerTarget.id) as AnyStructure).hits ==\r\n        (Game.getObjectById(global.repairerTarget.id) as AnyStructure).hitsMax) {\r\n      global.repairerTarget = null;\r\n      return;\r\n    }\r\n    if (creep.repair(global.repairerTarget) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(global.repairerTarget);\r\n    }\r\n    return;\r\n  }\r\n  let injured: AnyStructure[] = creep.room.find(FIND_STRUCTURES, {\r\n    filter: object => object.hits < object.hitsMax});\r\n  let targetTo: AnyStructure[] = [];\r\n  if (creep.room.find(FIND_STRUCTURES,{filter:\r\n      structure => structure.structureType == STRUCTURE_TOWER})[0] == undefined){\r\n    targetTo = injured.filter(structure => structure.structureType != STRUCTURE_WALL);\r\n  }\r\n  if (targetTo[0] == undefined) {\r\n    targetTo = injured.sort((a,b) => a.hits - b.hits);\r\n  }\r\n  if (creep.store[RESOURCE_ENERGY] < creep.store.getCapacity(RESOURCE_ENERGY) / 2 &&\r\n      !creep.pos.inRangeTo(targetTo[0], 10)){\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n      return;\r\n  }\r\n  global.repairerTarget = targetTo[0];\r\n  if (creep.repair(targetTo[0]) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(targetTo[0]);\r\n  }\r\n}\r\n\r\nfunction goGetEnergy(creep: Creep): void {\r\n  let targetEnergy: AnyStoreStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, \r\n    {filter: (structure) => {return (structure.structureType == STRUCTURE_CONTAINER ||\r\n    structure.structureType == STRUCTURE_STORAGE)\r\n    && structure.store[RESOURCE_ENERGY] > 0}});\r\n  if (targetEnergy == null) {\r\n    let targetsource: Source = globalStructure.sources[0]\r\n    if(creep.harvest(targetsource) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(targetsource);\r\n    }\r\n  } else {\r\n    if (creep.withdraw(targetEnergy, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(targetEnergy);\r\n      }\r\n  }\r\n}","import { roleRepairer } from \"../Role/RoleRepairer\";\r\nimport { globalStructure } from \"../global/GlobalStructure\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\n\r\nexport const repairTask = {\r\n  run: function() {\r\n    let repairers: Id<Creep>[] = Memory.roles.repaiers;\r\n    let containers: StructureContainer[] = globalStructure.containers;\r\n    if (repairers.length < 1 && containers.length > 0) {\r\n      newRepairer();\r\n    }\r\n    for (let i = 0; i < repairers.length; ++i) {\r\n      roleRepairer.run(Game.getObjectById(repairers[i]));\r\n    }\r\n  }\r\n}\r\n\r\nfunction newRepairer() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'repairer';\r\n  let newName: string = 'Repairer' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('repairer'), newName, {\r\n    memory: {role: 'repairer'}});\r\n}","import { globalRole } from \"../global/GlobalRole\";\r\n\r\nCreep.prototype.transferTo = function(fromCreep: Creep, toCreep?: Creep): number {\r\n  if (toCreep == undefined) {\r\n    if (!globalRole.transferTarget.includes(fromCreep.id)) {\r\n      globalRole.transferTarget.push(fromCreep.id);\r\n      return OK;\r\n    }\r\n    return -1;\r\n  }\r\n  let res = fromCreep.transfer(toCreep, RESOURCE_ENERGY);\r\n  if (res == OK) {\r\n    globalRole.transferTarget.splice(globalRole.transferTarget.indexOf(fromCreep.id), 1);\r\n  }\r\n  return res;\r\n}","// global\r\nimport { refreshGlobal } from './global/RefreshGlobal';\r\n// MyMemory\r\nimport { memoryRefresh } from './MyMemory/MemoryRefresh';\r\n// Structure\r\nimport { structureLink } from './Structure/StructureLink';\r\nimport { structureTower } from './Structure/StructureTower';\r\n// tasks\r\nimport { harvestTask } from './Tasks/HarvestTask';\r\nimport { upgradeTask } from './Tasks/UpgradeTask';\r\nimport { buildTask } from './Tasks/BuildTask';\r\nimport { repairTask } from './Tasks/RepairTask';\r\n// CreepPototype.ts\r\nimport './Role/CreepPototype'\r\n\r\nexport const loop = function (): void {\r\n  if(Game.cpu.bucket == 10000) {\r\n    Game.cpu.generatePixel();\r\n  }\r\n  if (Game.spawns.Spawn1 != undefined) {\r\n    // refresh global variable\r\n    if (Game.time % 100 == 0) {\r\n      refreshGlobal();\r\n    }\r\n    // refresh memory\r\n    memoryRefresh.refresh();\r\n    if (Game.spawns.Spawn1 != undefined) {\r\n      // run tasks\r\n      harvestTask.run();\r\n      upgradeTask.run();\r\n      buildTask.run();\r\n      repairTask.run();\r\n      // run structures\r\n      for (let name in Game.structures) {\r\n        let structure = Game.structures[name];\r\n        switch (structure.structureType) {\r\n          case STRUCTURE_TOWER : structureTower.run(structure as StructureTower); break;\r\n          case STRUCTURE_LINK : structureLink.run(structure as StructureLink); break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],"names":["transfer","goGetEnergy","backRoom"],"mappings":"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"}