{"version":3,"file":"main.js","sources":["../src/global/GlobalStructure.ts","../src/global/GlobalRole.ts","../src/global/RefreshGlobal.ts","../src/NewCreep/NewCreepBodys.ts","../src/NewCreep/NewCreeps.ts","../src/Role/RoleAttacker.ts","../src/Role/RoleBuilder.ts","../src/Role/RoleClaimer.ts","../src/Role/RoleHarvester.ts","../src/Role/RoleHealer.ts","../src/Role/RoleRepairer.ts","../src/Role/RoleTransfer.ts","../src/Role/RoleUpgrader.ts","../src/Structure/StructureLink.ts","../src/Structure/StructureTower.ts","../src/main.ts"],"sourcesContent":["export const globalStructure: GlobalStructure = {\r\n  sources: Object.values(Game.rooms)[0].find(FIND_SOURCES),\r\n  structures: Object.values(Game.rooms)[0].find(FIND_STRUCTURES),\r\n  containers: Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_CONTAINER}),\r\n  links: Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_LINK}),\r\n  fromLinks: creatLinks('from'),\r\n  toLinks: creatLinks('to'),\r\n\r\n  refresh: function() {\r\n    globalStructure.structures = Game.spawns.Spawn1.room.find(FIND_STRUCTURES);\r\n    globalStructure.containers = globalStructure.structures.filter(structure => \r\n      structure.structureType == STRUCTURE_CONTAINER) as StructureContainer[];\r\n    globalStructure.links = globalStructure.structures.filter(structure => \r\n      structure.structureType == STRUCTURE_LINK) as StructureLink[];\r\n    this.fromLinks = creatLinks('from');\r\n    this.toLinks = creatLinks('to');\r\n  }\r\n}\r\n\r\nfunction creatLinks(context: string): StructureLink[] {\r\n  let from: StructureLink[] = [];\r\n  let to: StructureLink[]= [];\r\n  let links: StructureLink[] = Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_LINK});\r\n  let sources = Object.values(Game.rooms)[0].find(FIND_SOURCES);\r\n  for (let i = 0; i < links.length; ++i) {\r\n    if (links[i].pos.findInRange(sources, 3)[0] != undefined) {\r\n      from.push(links[i]);\r\n    } else {\r\n      to.push(links[i]);\r\n    }\r\n  }\r\n  switch (context) {\r\n    case 'from': return from;\r\n    case 'to': return to;\r\n  }\r\n}","// harvester\r\nglobal.harvestPath = [];\r\n// repairer\r\nglobal.repairerTarget = null;","import { globalStructure } from './GlobalStructure';\r\nimport './GlobalRole';\r\n/**\r\n * @file to refresh global veriables\r\n * @author LazyKitty\r\n */\r\nexport const refreshGlobal = function() {\r\n  // GlobalStructure.ts\r\n  if (Game.spawns.Spawn1 != undefined) {\r\n    globalStructure.refresh();\r\n  }\r\n  // GlobalRole.ts\r\n  // harvester\r\n  global.harvestPath = [];\r\n  // repairer\r\n  global.repairerTarget = null;\r\n}","export const newCreepBody = function(role: String): BodyPartConstant[] {\r\n  // MOVE 50,WORK 100,CARRY 50,ATTACK 80,RANGED_ATTACK 150,HEAL 250,CLAIM 600,TOUGH 10\r\n  let capacity: number = Game.spawns.Spawn1.room.energyCapacityAvailable;\r\n  if (capacity == 300 || Object.getOwnPropertyNames(Memory.creeps).length < 7 ) {\r\n    switch (role) {\r\n      case 'harvester' : return [WORK, CARRY, MOVE, MOVE];\r\n      case 'upgrader' : return [WORK, CARRY, MOVE, MOVE];\r\n      case 'builder' : return [WORK, CARRY, MOVE, MOVE];\r\n      case 'transfer' : return [CARRY, CARRY, CARRY, MOVE, MOVE, MOVE];\r\n      case 'repairer' : return [WORK, CARRY, MOVE, MOVE];\r\n    }\r\n  } else {\r\n    switch (role) {\r\n      case 'harvester' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'upgrader' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        capacity /= 50;\r\n        bodys.push(WORK, CARRY, MOVE);\r\n        capacity -= 4;\r\n        for (; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'builder' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 4; capacity -= 4) {\r\n          bodys.push(WORK, CARRY, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'transfer' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 2; capacity -= 2) {\r\n          bodys.push(MOVE, CARRY);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'repairer' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, CARRY, MOVE, MOVE);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n    }\r\n  }\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\r\nimport { newCreepBody } from \"./NewCreepBodys\";\r\n\r\nexport const newCreeps = {\r\n  /**\r\n   * \r\n   * @returns { number } 0 | -1\r\n   * @author LazyKitty\r\n   */\r\n  run: function(): number {\r\n    // delete dead creeps's memory\r\n    deleteDead();\r\n    if (Game.spawns.Spawn1.room.energyAvailable < 200) {\r\n      return 0;\r\n    }\r\n    // if harvesters less than sources, create it\r\n    let harvesters: Creep[] = _.filter(Game.creeps, (creep) => creep.memory.role == 'harvester');\r\n    let sourcesLength: number = globalStructure.sources.length;\r\n    if (harvesters.length < sourcesLength) {\r\n      newHarvester(harvesters, sourcesLength);\r\n      return 0;\r\n    }\r\n    // if builders less than 1 and sites exist, creat it\r\n    let builders: Creep[] = _.filter(Game.creeps, (creep) => creep.memory.role == 'builder');\r\n    let sites: ConstructionSite[] = Game.spawns.Spawn1.room.find(FIND_CONSTRUCTION_SITES);\r\n    if (sites.length != 0 && builders.length < 1) {\r\n      newBuilder();\r\n      return 0;\r\n    }\r\n    // if upgrader less than 1, creat it\r\n    let upgraders: Creep[] = _.filter(Game.creeps, (creep) => creep.memory.role == 'upgrader');\r\n    let upgradersNum: number = sites.length > 0 || globalStructure.links.length > 0 ? 1 : 2;\r\n    if (upgraders.length < upgradersNum) {\r\n      newUpgrader();\r\n      return 0;\r\n    }\r\n    // if transfers less than sources's length * 2, creat it\r\n    // if link exist, transfer's number equal sources's length\r\n    let transfers: Creep[] = _.filter(Game.creeps, (creep) => creep.memory.role == 'transfer');\r\n    let transferNum: number = globalStructure.links[0] != undefined ? sourcesLength: sourcesLength * 2;\r\n    if (globalStructure.containers.length > 1 && transfers.length < transferNum) {\r\n      newTransfer(transfers, sourcesLength);\r\n      return 0;\r\n    }\r\n    // if repairer less than 1, creat it\r\n    let repairer: Creep[] = _.filter(Game.creeps, (creep) => creep.memory.role == 'repairer');\r\n    if (globalStructure.containers.length > 1 && repairer.length < 1) {\r\n      newRepairer();\r\n      return 0; \r\n    }\r\n    return -1;\r\n  }\r\n}\r\n\r\nfunction deleteDead () {\r\n  // delete dead creeps\r\n  for(let name in Memory.creeps) {\r\n    if(!Game.creeps[name]) {\r\n      delete Memory.creeps[name];\r\n    }\r\n  }\r\n}\r\n\r\nfunction newHarvester(harvesters: Creep[], sourcesLength: number) {\r\n  let newName: string = 'Harvester' + Game.time;\r\n  let posFlag = 0;\r\n  for (let i = 0; i < sourcesLength; ++i) {\r\n    for (let j = 0; j < harvesters.length; ++j) {\r\n      if (i == harvesters[j].memory.sourcesPosition) {\r\n        posFlag += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (posFlag == i) break;\r\n  }\r\n  if (posFlag >= sourcesLength) return;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('harvester'), newName, {\r\n    memory: {role: 'harvester', sourcesPosition: posFlag}});\r\n}\r\n\r\nfunction newUpgrader() {\r\n  let newName: string = 'Upgrader' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('upgrader'), newName, {\r\n    memory: {role: 'upgrader'}});\r\n}\r\n\r\nfunction newBuilder() {\r\n  let newName: string = 'Builder' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('builder'), newName, {\r\n    memory: {role: 'builder'}});\r\n}\r\n\r\nfunction newTransfer(transfer: Creep[], sourcesLength: number) {\r\n  let newName: string = 'Transfer' + Game.time;\r\n  let posFlag: number = 0;\r\n  let temp: number = 0;\r\n  let transferNum = globalStructure.links[0] == undefined ? 1: 2;\r\n  for (let i = 0; i < sourcesLength; ++i) {\r\n    for (let j = 0; j < transfer.length; ++j) {\r\n      if (transfer[j].memory.sourcesPosition == i) {\r\n        temp += 1;\r\n        if (temp == transferNum) {\r\n          posFlag += 1;\r\n          temp = 0;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (posFlag == i) break;\r\n  }\r\n  if (posFlag >= sourcesLength) return;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('transfer'), newName, {memory: {\r\n    role: 'transfer', \r\n    sourcesPosition: posFlag,\r\n  }});\r\n}\r\n\r\nfunction newRepairer() {\r\n  let newName: string = 'Repairer' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('repairer'), newName, {\r\n    memory: {role: 'repairer'}});\r\n}","export const roleAttacker = {\r\n  run : function (creep) {\r\n    // let enemy = creep.room.find(FIND_HOSTILE_CREEPS);\r\n    // if (enemy[0] == undefined) {\r\n    //   return;\r\n    // } else {\r\n    //   goAttack(creep, enemy);\r\n    // }\r\n    if(creep.pos.roomName != creep.memory.room) {\r\n      let pos = Game.flags.Flag1.pos;\r\n      if (creep.moveTo(pos) == ERR_NO_PATH) {\r\n        let target = creep.pos.findClosestByPath(FIND_STRUCTURES);\r\n        creep.attack(target);\r\n      }\r\n      /* creep.moveTo(Game.getObjectById('63b529848d21f8ad5fe698c6').pos);\r\n      creep.attack(Game.getObjectById('63b529848d21f8ad5fe698c6')); */\r\n      return;\r\n  }\r\n    let enemy = creep.room.find(FIND_HOSTILE_CREEPS);\r\n    if (enemy[0] == undefined) {\r\n      enemy = creep.room.find(FIND_HOSTILE_STRUCTURES, {filter:\r\n        (structure) => structure.structureType == STRUCTURE_TOWER});\r\n      if (enemy[0] == undefined) {\r\n        return;\r\n      }\r\n      goAttack(creep, enemy);\r\n    } else {\r\n      goAttack(creep, enemy);\r\n    }\r\n  }\r\n}\r\n\r\nfunction goAttack(creep, enemy) {\r\n  let target = creep.pos.findClosestByPath(enemy);\r\n  if (creep.attack(target) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(target);\r\n  }\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\n\nexport const roleBuilder = {\n  run: function (creep: Creep): void {\n    if (backRoom(creep) == 0) {\n      return;\n    }\n    if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.building = false;\n    } else if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {\n      creep.memory.building = true;\n    }\n\n    if(creep.memory.building) {\n      goBuild(creep);\n    } else {\n      goGetEnergy(creep);\n    }\n\t}\n};\n\nfunction backRoom(creep: Creep): number {\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\n    return 0;\n  } else {\n    return -1;\n  }\n}\n\nfunction goBuild(creep: Creep): void {\n  let target: ConstructionSite[] = creep.room.find(FIND_CONSTRUCTION_SITES);\n    if(target[0]) {\n      if (creep.store[RESOURCE_ENERGY] < creep.store.getCapacity(RESOURCE_ENERGY) / 2 &&\n        !creep.pos.inRangeTo(target[0], 10)){\n        creep.memory.building = false;\n        return;\n      }\n      if(creep.build(target[0]) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(target[0], {visualizePathStyle: {stroke: '#ffffff'}});\n      }\n    }\n}\n\nfunction goGetEnergy(creep: Creep): void {\n  let targetStore: AnyStoreStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, \n    {filter: (structure) => {return (structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_STORAGE) &&\n    structure.store[RESOURCE_ENERGY] > 0}});\n\n  if (targetStore != null) {\n    if (creep.withdraw(targetStore, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(targetStore);\n    }\n    return;\n  }\n  let sources: Source[] = globalStructure.sources.filter(source => source.energy > 0);\n  if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n    if (creep.moveTo(sources[0]) == ERR_NO_PATH) {\n      if (creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(sources[1]);\n      }\n    }\n  }\n  return;\n}","export const roleClaimer = {\r\n  run: function(creep: Creep): void {\r\n    let pos = new RoomPosition(1,1,'W59S26');\r\n    if (creep.pos.roomName != pos.roomName) {\r\n      creep.moveTo(pos.x, pos.y);\r\n      return;\r\n    }\r\n    if(creep.room.controller) {\r\n      if(creep.claimController(creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n          creep.moveTo(creep.room.controller);\r\n      }\r\n    }\r\n  }\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\n\nexport const roleHarvester = {\n  run: function(creep: Creep): void {\n    // if harvester went into the wrong room\n    if (backRoom(creep) == 0) {\n      return;\n    }\n    if (!creep.memory.harvesting && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.harvesting = true;\n    } else if(creep.memory.harvesting && creep.store.getFreeCapacity() == 0) {\n      if (transfer(creep) != true) {\n        creep.memory.harvesting = false;\n      }\n    }\n    // if harvester's free capacity more than 0, harvest energy\n    if (creep.memory.harvesting) {\n      goHarvest(creep);\n    } else {\n      transferEnergy(creep);\n    }\n    if (creep.ticksToLive <= 30 && !creep.memory.dying) {\n      newOne(creep);\n    }\n\t}\n};\n\nfunction backRoom(creep: Creep): number {\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\n    return 0;\n  } else {\n    return -1;\n  }\n}\n\nfunction goHarvest(creep: Creep): void {\n  let targetSource: Source = globalStructure.sources[creep.memory.sourcesPosition];\n  if (targetSource.energy == 0) return;\n  let container = globalStructure.containers.filter(structure =>\n    structure.pos.isNearTo(targetSource as Source));\n  if (container[0] != undefined) {\n    if (container[0].store.getFreeCapacity(RESOURCE_ENERGY) == 0 &&\n        creep.getActiveBodyparts(CARRY) == 0) {\n      return;\n    } \n    if (!creep.pos.isEqualTo(container[0]) &&\n        creep.pos.isNearTo(targetSource)) {\n      creep.moveTo(container[0]);\n      return;\n    }\n  }\n  \n  if(creep.harvest(targetSource) == ERR_NOT_IN_RANGE) {\n    if (global.harvestPath[creep.memory.sourcesPosition] == undefined) {\n      global.harvestPath[creep.memory.sourcesPosition] = creep.room.findPath(creep.pos, targetSource.pos);\n    }\n    creep.moveByPath(global.harvestPath[creep.memory.sourcesPosition]);\n  }\n}\n\nfunction transferEnergy(creep: Creep): void {\n  let source: Source = globalStructure.sources[creep.memory.sourcesPosition];\n\n  if (globalStructure.links[0] != undefined && creep.getActiveBodyparts(CARRY) >= 1) {\n    let link: StructureLink[] = creep.pos.findInRange(globalStructure.fromLinks, 3).filter(\n      link => link.store.getFreeCapacity(RESOURCE_ENERGY) > 0\n    );\n    if (link[0] != undefined) {\n      if (creep.transfer(link[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(link[0]);\n      }\n      return;\n    }\n  }\n  \n  let container: StructureContainer = source.pos.findInRange(globalStructure.containers, 1)[0];\n  if (container != undefined && container.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {\n    if (creep.transfer(container, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(container);\n    }\n    return;\n  }\n\n  let structures: AnyStructure[] = creep.room.find(FIND_STRUCTURES, {\n    filter: (structure) => {return (structure.structureType == STRUCTURE_STORAGE ||\n    structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_EXTENSION ||\n    structure.structureType == STRUCTURE_SPAWN ||\n    structure.structureType == STRUCTURE_TOWER)\n    && structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;\n    }\n  });\n\n  let transferTo: AnyStructure[] = structures.filter(structure => \n    structure.structureType == STRUCTURE_EXTENSION);\n  let target: AnyStructure;\n  if (transferTo[0] == undefined) {\n    target = creep.pos.findClosestByPath(structures);\n  } else {\n    target = creep.pos.findClosestByPath(transferTo);\n  }\n\n  if (creep.transfer(target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(target);\n  }\n}\n\nfunction newOne(creep: Creep): void {\n  let spawns: StructureSpawn[] = creep.room.find(FIND_STRUCTURES, {filter: structure =>\n    structure.structureType == STRUCTURE_SPAWN});\n  let newName: string = 'Harvester' + Game.time;\n  let error: number = Game.spawns[spawns[0].name].spawnCreep(newCreepBody('harvester'), \n    newName, {memory: {role: 'harvester', sourcesPosition: creep.memory.sourcesPosition}});\n  if (error == OK) {\n    creep.memory.dying = true;\n  }\n}\n\nfunction transfer(creep: Creep): boolean {\n  let link: StructureLink = creep.pos.findInRange(globalStructure.fromLinks, 1)[0];\n  if (link != undefined) {\n    if (creep.transfer(link, RESOURCE_ENERGY) == OK) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    let source: Source = globalStructure.sources[creep.memory.sourcesPosition];\n    let container: StructureContainer = globalStructure.containers.filter(structure =>\n      structure.pos.isNearTo(source))[0];\n    if (container != undefined) {\n      if (creep.transfer(container, RESOURCE_ENERGY) == OK) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n  return false;\n}","export const roleHealer = {\r\n  run : function(creep) {\r\n    let injured = creep.pos.findClosestByPath(FIND_MY_CREEPS, {filter :\r\n      (creeps) => creeps.hits < creeps.hitsMax && creeps.room == creep.room});\r\n    if (injured == undefined) {\r\n      let enemy = creep.room.find(FIND_HOSTILE_CREEPS);\r\n      if (enemy[0] == undefined) {\r\n        return;\r\n      } else {\r\n        let attacker = creep.pos.findClosestByPath(FIND_MY_CREEPS, {filter :\r\n          (creeps) => creeps.memory.role == 'attacker'});\r\n        creep.moveTo(attacker);\r\n      }\r\n    } else {\r\n      if (creep.heal(injured) == ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(injured);\r\n      }\r\n    }\r\n  }\r\n  \r\n}","export const roleRepairer = {\r\n  run: function(creep: Creep): void {\r\n    if(creep.memory.repairing && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n    } else if(!creep.memory.repairing && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.repairing = true;\r\n    }\r\n\r\n    if (creep.memory.repairing) {\r\n      goRepair(creep);\r\n      backRoom(creep);\r\n    } else {\r\n      goGetEnergy(creep);\r\n    }\r\n  }\r\n}\r\n\r\nfunction backRoom(creep: Creep): void {\r\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\r\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\r\n  }\r\n}\r\n\r\nfunction goRepair(creep: Creep): void {\r\n  if (global.repairerTarget != null && \r\n      global.repairerTarget.hits < global.repairerTarget.hitsMax) {\r\n    if ((Game.getObjectById(global.repairerTarget.id) as AnyStructure).hits ==\r\n        (Game.getObjectById(global.repairerTarget.id) as AnyStructure).hitsMax) {\r\n      global.repairerTarget = null;\r\n      return;\r\n    }\r\n    if (creep.repair(global.repairerTarget) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(global.repairerTarget);\r\n    }\r\n    return;\r\n  }\r\n  let injured: AnyStructure[] = creep.room.find(FIND_STRUCTURES, {\r\n    filter: object => object.hits < object.hitsMax});\r\n  let targetTo: AnyStructure[];\r\n  if (creep.room.find(FIND_STRUCTURES,{filter:\r\n      structure => structure.structureType == STRUCTURE_TOWER})[0] != undefined){\r\n    targetTo = injured.filter(structure => structure.structureType != STRUCTURE_WALL);\r\n  }\r\n  if (targetTo == undefined) {\r\n    targetTo = injured.sort((a,b) => a.hits - b.hits);\r\n  }\r\n  if (creep.store[RESOURCE_ENERGY] < creep.store.getCapacity(RESOURCE_ENERGY) / 2 &&\r\n      !creep.pos.inRangeTo(targetTo[0], 10)){\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n      return;\r\n  }\r\n  global.repairerTarget = targetTo[0];\r\n  if (creep.repair(targetTo[0]) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(targetTo[0]);\r\n  }\r\n}\r\n\r\nfunction goGetEnergy(creep: Creep): void {\r\n  let targetEnergy: AnyStoreStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, \r\n    {filter: (structure) => {return (structure.structureType == STRUCTURE_CONTAINER ||\r\n    structure.structureType == STRUCTURE_STORAGE)\r\n    && structure.store[RESOURCE_ENERGY] > 0}});\r\n  if (targetEnergy == null) {\r\n    let targetsource: Source = creep.pos.findClosestByPath(FIND_SOURCES);\r\n    if(creep.harvest(targetsource) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(targetsource);\r\n    }\r\n  } else {\r\n    if (creep.withdraw(targetEnergy, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(targetEnergy);\r\n      }\r\n  }\r\n}","import { globalStructure } from \"@/global/GlobalStructure\";\r\n\r\nexport const roleTransfer = {\r\n  run: function(creep: Creep): void {\r\n    if(creep.memory.transfering && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.transfering = false;\r\n    }\r\n    if(!creep.memory.transfering && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.transfering = true;\r\n    }\r\n\r\n    if (backRoom(creep) == 0) {\r\n      return;\r\n    }\r\n    if (creep.memory.transfering) {\r\n      goTransfer(creep);\r\n    } else {\r\n      goWithdraw(creep);\r\n    }\r\n  }\r\n}\r\n\r\nfunction backRoom(creep: Creep): number {\r\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\r\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\r\n    return 0;\r\n  } else {\r\n    return -1;\r\n  }\r\n}\r\n\r\n\r\nfunction goTransfer(creep: Creep): void {\r\n  let structures: AnyStructure[] = creep.room.find(FIND_STRUCTURES);\r\n  let target: AnyStructure[] = structures.filter(structure => \r\n    (structure.structureType == STRUCTURE_EXTENSION ||\r\n    structure.structureType == STRUCTURE_SPAWN) &&\r\n    structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0 );\r\n  if (target[0] != undefined) {\r\n    let temp: AnyStructure = creep.pos.findInRange(target, 3)[0];\r\n    if (temp != undefined) {\r\n      target[0] = temp;\r\n    }\r\n    if (creep.transfer(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(target[0]);\r\n    }\r\n    return;\r\n  }\r\n\r\n  target = structures.filter(structure => \r\n    (structure.structureType == STRUCTURE_TOWER) &&\r\n    structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n  if (target[0] != undefined) {\r\n    let temp: AnyStructure = creep.pos.findInRange(target, 6)[0];\r\n    if (temp != undefined) {\r\n      target[0] = temp;\r\n    }\r\n    if (creep.transfer(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(target[0]);\r\n    }\r\n    return;\r\n  }\r\n\r\n  target = structures.filter(structure =>\r\n    ((structure.structureType == STRUCTURE_CONTAINER &&\r\n    structure.pos.isNearTo(structure.pos.findClosestByPath(FIND_SOURCES)) == false) ||\r\n    structure.structureType == STRUCTURE_STORAGE) &&\r\n    structure.store.getFreeCapacity(RESOURCE_ENERGY) >= creep.store[RESOURCE_ENERGY]);\r\n  if (creep.transfer(target[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(target[0]);\r\n  }\r\n}\r\n\r\nfunction goWithdraw(creep: Creep): void {\r\n  if (globalStructure.toLinks.length > 0) {\r\n    if (globalStructure.toLinks[0].store[RESOURCE_ENERGY] >= 100) {\r\n      if (creep.withdraw(globalStructure.toLinks[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(globalStructure.toLinks[0]);\r\n      }\r\n      return;\r\n    }\r\n  }\r\n  let targetSource: Source = globalStructure.sources[creep.memory.sourcesPosition];\r\n  let targetContainer: AnyStructure = targetSource.pos.findClosestByPath(FIND_STRUCTURES, {filter:\r\n    (structure) => (structure.structureType == STRUCTURE_CONTAINER)});\r\n  if (targetContainer == null || \r\n      (targetContainer as StructureContainer).store[RESOURCE_ENERGY] <= creep.store.getFreeCapacity(RESOURCE_ENERGY)) {\r\n    targetContainer = creep.pos.findClosestByPath(FIND_STRUCTURES, {filter:\r\n    (structure) => (structure.structureType == STRUCTURE_CONTAINER ||\r\n    structure.structureType == STRUCTURE_STORAGE)&&\r\n    structure.store[RESOURCE_ENERGY] >= creep.store.getFreeCapacity(RESOURCE_ENERGY)\r\n    });\r\n  }\r\n  if (creep.withdraw(targetContainer, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(targetContainer);\r\n  }\r\n}","export const roleUpgrader = {\n  run: function(creep: Creep): void {\n    if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.upgrading = false;\n    }\n    if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {\n      creep.memory.upgrading = true;\n    }\n\n    if(creep.memory.upgrading) {\n      isNearToTarget(creep);\n      goUpgrade(creep);\n    } else {\n      goGetEnergy(creep);\n    }\n\t}\n};\n\nfunction goUpgrade(creep: Creep): void {\n  if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(creep.room.controller);\n  }\n}\n\nfunction goGetEnergy(creep: Creep): void {\n  let targetContainer: AnyStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, {filter :\n    (structure) => (structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_STORAGE) &&\n    structure.store[RESOURCE_ENERGY] > 0});\n  if (targetContainer == undefined) {\n    let target: Source = creep.pos.findClosestByPath(FIND_SOURCES,{filter :\n      (sources) => sources.energy > 0});\n    if (creep.harvest(target) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(target);\n    }\n  } else if (creep.withdraw(targetContainer, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(targetContainer);\n  }\n}\n\nfunction isNearToTarget(creep: Creep): void {\n  let closestSource: Source = creep.pos.findClosestByPath(FIND_SOURCES);\n  if (creep.pos.isNearTo(closestSource)) {\n    creep.moveTo(creep.room.controller);\n  }\n}","import { globalStructure } from \"@/global/GlobalStructure\"\r\n\r\nexport const structureLink = {\r\n  run: function(link: StructureLink): void {\r\n    if (globalStructure.fromLinks.includes(link)) {\r\n      transfer(link);\r\n    }\r\n  }\r\n}\r\n\r\nfunction transfer(link: StructureLink): void {\r\n  if (link.store[RESOURCE_ENERGY] >= 100) {\r\n    for (let i = 0; i < globalStructure.toLinks.length; ++i) {\r\n      let energy = globalStructure.toLinks[i].store.getFreeCapacity(RESOURCE_ENERGY);\r\n      if (energy > 10) {\r\n        link.transferEnergy(globalStructure.toLinks[0]);\r\n      }\r\n    }\r\n  }\r\n}","export const structureTower = {\r\n  run: function (tower: StructureTower): void {\r\n    let enemy: Creep[] = tower.room.find(FIND_HOSTILE_CREEPS);\r\n    let injured: Creep[] = tower.room.find(FIND_MY_CREEPS, {filter :\r\n      (creeps) => creeps.hits < creeps.hitsMax && creeps.room == creeps.room});\r\n    if (enemy[0] != undefined) {\r\n      goAttack(tower, enemy);\r\n    } else if (injured[0] != undefined) {\r\n      tower.heal(injured[0]);\r\n    } else {\r\n      runRepair(tower);\r\n    }\r\n  }\r\n};\r\n\r\nfunction goAttack(tower: StructureTower, enemy: Creep[]): void {\r\n  let target: Creep = tower.pos.findClosestByPath(enemy);\r\n  tower.attack(target);\r\n}\r\n\r\nfunction runRepair (tower: StructureTower): void {\r\n  let targetTo: AnyStructure[] = tower.room.find(FIND_STRUCTURES, {\r\n    filter: object => object.hits < object.hitsMax &&\r\n    object.structureType != STRUCTURE_WALL});\r\n  tower.repair(targetTo[0]);\r\n}","// global\r\nimport { refreshGlobal } from './global/RefreshGlobal';\r\n// NewCreep\r\nimport { newCreeps } from './NewCreep/NewCreeps';\r\n// Role\r\nimport { roleAttacker } from './Role/RoleAttacker';\r\nimport { roleBuilder } from './Role/RoleBuilder';\r\nimport { roleClaimer } from './Role/RoleClaimer';\r\nimport { roleHarvester } from './Role/RoleHarvester';\r\nimport { roleHealer } from './Role/RoleHealer';\r\nimport { roleRepairer } from './Role/RoleRepairer';\r\nimport { roleTransfer } from './Role/RoleTransfer';\r\nimport { roleUpgrader } from './Role/RoleUpgrader';\r\n// Structure\r\nimport { structureLink } from './Structure/StructureLink';\r\nimport { structureTower } from './Structure/StructureTower';\r\n\r\nexport const loop = function (): void {\r\n  if (Game.spawns.Spawn1 != undefined) {\r\n    // refresh global variable\r\n    if (Game.time % 100 == 0) {\r\n      refreshGlobal();\r\n    }\r\n    if (Game.spawns.Spawn1 != undefined) {\r\n      // create new creeps\r\n      newCreeps.run()\r\n      // run creeps\r\n      for (let name in Game.creeps) {\r\n        let creep: Creep = Game.creeps[name];\r\n        switch (creep.memory.role) {\r\n          case 'harvester' : roleHarvester.run(creep); break;\r\n          case 'upgrader' : roleUpgrader.run(creep); break;\r\n          case 'builder' : roleBuilder.run(creep); break;\r\n          case 'transfer' : roleTransfer.run(creep); break;\r\n          case 'repairer' : roleRepairer.run(creep); break;\r\n          case 'attacker' : roleAttacker.run(creep); break;\r\n          case 'healer' : roleHealer.run(creep); break;\r\n          case 'claimer' : roleClaimer.run(creep); break;\r\n        }\r\n      }\r\n      // run structures\r\n      for (let name in Game.structures) {\r\n        let structure = Game.structures[name];\r\n        switch (structure.structureType) {\r\n          case STRUCTURE_TOWER : structureTower.run(structure as StructureTower); break;\r\n          case STRUCTURE_LINK : structureLink.run(structure as StructureLink); break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],"names":["goAttack","backRoom","goGetEnergy","transfer"],"mappings":"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"}