{"version":3,"file":"main.js","sources":["../src/MyMemory/MemoryDelete.ts","../src/MyMemory/MemoryRoles.ts","../src/MyMemory/MemoryRoom.ts","../src/MyMemory/MemoryRefresh.ts","../src/Structure/StructureLink.ts","../src/Structure/StructureTower.ts","../src/NewCreep/NewCreepBodys.ts","../src/Tasks/Tasks.ts","../src/Role/RoleHarvester.ts","../src/Tasks/HarvestTask.ts","../src/Role/RoleTransfer.ts","../src/Tasks/TransferTask.ts","../src/Role/RoleUpgrader.ts","../src/Tasks/UpgradeTask.ts","../src/Role/RoleBuilder.ts","../src/Role/RoleRepairer.ts","../src/Tasks/BuildTask.ts","../src/Tasks/RepairTask.ts","../src/Role/RoleClaimer.ts","../src/Tasks/ClaimTask.ts","../src/main.ts"],"sourcesContent":["export const memoryDelete = {\r\n  deleteDead: function() {\r\n    // delete dead creeps\r\n    for(let name in Memory.creeps) {\r\n      if(!Game.creeps[name]) {\r\n        delete Memory.creeps[name];\r\n      }\r\n    }\r\n  }\r\n}\r\n","export const memoryRoles = {\r\n  refresh: function(): void {\r\n    let roles = returnIds();\r\n    Memory.roles = {\r\n      // Id<Creep>[]\r\n      harvesters: roles.harvester,\r\n      transfers: roles.transfer,\r\n      upgraders: roles.upgrader,\r\n      builders: roles.builder,\r\n      repaiers: roles.repairer,\r\n    }\r\n  }\r\n}\r\n\r\nfunction returnIds() {\r\n  let roles = {\r\n    harvester: [],\r\n    transfer: [],\r\n    upgrader: [],\r\n    builder: [],\r\n    repairer: [],\r\n    claimer: [],\r\n  }\r\n  for (let name in Game.creeps) {\r\n    let creep = Game.creeps[name];\r\n    if (creep.memory.role != undefined) {\r\n      roles[creep.memory.role].push(creep.id);\r\n    }\r\n  }\r\n  return roles;\r\n}","export const memoryRoom = {\r\n  refresh: function() {\r\n    Memory.rooms = {};\r\n    for(let name in Game.rooms) {\r\n      let structures = Game.rooms[name].find(FIND_STRUCTURES);\r\n      Memory.rooms[name] = {\r\n        // Id<Source>[]\r\n        sources: Game.rooms[name].find(FIND_SOURCES).map(source => source.id),\r\n        // Id<AnyStructure>[]\r\n        structures: structures.map(structure => structure.id) as Id<AnyStructure>[],\r\n        // Id<StructureSpawn>[]\r\n        spawns: structures.filter(structure => structure.structureType == STRUCTURE_SPAWN).\r\n          map(structure => structure.id) as Id<StructureSpawn>[],\r\n        // Id<ConstructionSite>[]\r\n        sites: Game.rooms[name].find(FIND_CONSTRUCTION_SITES).map(site => site.id),\r\n        // Id<StructureContainer>[]\r\n        containers: structures.filter(structure => structure.structureType == STRUCTURE_CONTAINER).\r\n          map(structure => structure.id) as Id<StructureContainer>[],\r\n        // Id<StructureStorage>\r\n        storage: Game.rooms[name].storage ? Game.rooms[name].storage.id : null,\r\n        // StructureLink[]\r\n        links: structures.filter(structure => structure.structureType == STRUCTURE_LINK).\r\n          map(structure => structure.id) as Id<StructureLink>[],\r\n        // harvested energy fromLink~toLink\r\n        fromLinks: creatLinks('from'),\r\n        toLinks: creatLinks('to'),\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nfunction creatLinks(context: string): Id<StructureLink>[] {\r\n  let from: Id<StructureLink>[] = [];\r\n  let to: Id<StructureLink>[]= [];\r\n  let links: StructureLink[] = Object.values(Game.rooms)[0].find(FIND_STRUCTURES, {filter: structure =>\r\n    structure.structureType == STRUCTURE_LINK});\r\n  let sources = Object.values(Game.rooms)[0].find(FIND_SOURCES);\r\n  for (let i = 0; i < links.length; ++i) {\r\n    if (links[i].pos.findInRange(sources, 3)[0] != undefined) {\r\n      from.push(links[i].id);\r\n    } else {\r\n      to.push(links[i].id);\r\n    }\r\n  }\r\n  switch (context) {\r\n    case 'from': return from;\r\n    case 'to': return to;\r\n  }\r\n  return [];\r\n}","import { memoryDelete } from \"./MemoryDelete\"\r\nimport { memoryRoles } from \"./MemoryRoles\";\r\nimport { memoryRoom } from \"./MemoryRoom\";\r\n\r\nexport const memoryRefresh = {\r\n  refresh: function() {\r\n    memoryRoom.refresh();\r\n    memoryDelete.deleteDead();\r\n    memoryRoles.refresh();\r\n  }\r\n}","export const structureLink = {\r\n  run: function(link: StructureLink, room: RoomMemory): void {\r\n    for (let i = 0; i < room.fromLinks.length; ++i) {\r\n      if (room.fromLinks[i] == link.id) {\r\n        transfer(link, room);\r\n        break;\r\n      }\r\n    }\r\n  },\r\n}\r\n\r\nfunction transfer(link: StructureLink, room: RoomMemory): void {\r\n  if (link.store[RESOURCE_ENERGY] >= 100) {\r\n    for (let i = 0; i < room.toLinks.length; ++i) {\r\n      let energy = Game.getObjectById(room.toLinks[i]).store.getFreeCapacity(RESOURCE_ENERGY);\r\n      if (energy > 10) {\r\n        link.transferEnergy(Game.getObjectById(room.toLinks[i]));\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}","import { object } from \"lodash\";\r\n\r\nexport const structureTower = {\r\n  run: function (tower: StructureTower): void {\r\n    let enemy: Creep[] = tower.room.find(FIND_HOSTILE_CREEPS);\r\n    let injured: Creep[] = tower.room.find(FIND_MY_CREEPS, {filter :\r\n      (creeps) => creeps.hits < creeps.hitsMax && creeps.room == creeps.room});\r\n    if (enemy[0] != undefined) {\r\n      goAttack(tower, enemy);\r\n    } else if (injured[0] != undefined) {\r\n      tower.heal(injured[0]);\r\n    } else {\r\n      runRepair(tower);\r\n    }\r\n  }\r\n};\r\n\r\nfunction goAttack(tower: StructureTower, enemy: Creep[]): void {\r\n  let target: Creep = tower.pos.findClosestByRange(enemy);\r\n  tower.attack(target);\r\n}\r\n\r\nfunction runRepair (tower: StructureTower): void {\r\n  let targetTo: AnyStructure[] = tower.room.find(FIND_STRUCTURES, {\r\n    filter: object => object.hits < object.hitsMax &&\r\n    object.structureType != STRUCTURE_WALL &&\r\n    object.structureType != STRUCTURE_RAMPART});\r\n  tower.repair(targetTo[0]);\r\n}","export const newCreepBody = function(role: String): BodyPartConstant[] {\r\n  // MOVE 50,WORK 100,CARRY 50,ATTACK 80,RANGED_ATTACK 150,HEAL 250,CLAIM 600,TOUGH 10\r\n  let capacity: number = Game.spawns.Spawn1.room.energyCapacityAvailable;\r\n  if (capacity == 300 || Object.getOwnPropertyNames(Memory.creeps).length < 4 ) {\r\n    switch (role) {\r\n      case 'harvester' : return [WORK, CARRY, MOVE];\r\n      case 'upgrader' : return [WORK, CARRY, MOVE];\r\n      case 'builder' : return [WORK, CARRY, MOVE, MOVE];\r\n      case 'transfer' : return [CARRY, MOVE];\r\n      case 'repairer' : return [WORK, CARRY, MOVE, MOVE];\r\n    }\r\n  } else {\r\n    switch (role) {\r\n      case 'harvester' : {\r\n        let bodys: BodyPartConstant[] = [CARRY];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length >= 7) {\r\n            if (capacity >= 2) {\r\n              bodys.push(WORK);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'upgrader' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        capacity /= 50;\r\n        bodys.push(WORK, CARRY, MOVE);\r\n        capacity -= 4;\r\n        for (; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, WORK, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'builder' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 4; capacity -= 4) {\r\n          bodys.push(WORK, CARRY, MOVE);\r\n          if (bodys.length == 9) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'transfer' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 2; capacity -= 2) {\r\n          bodys.push(MOVE, CARRY);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'repairer' : {\r\n        let bodys: BodyPartConstant[] = [];\r\n        for (capacity /= 50; capacity >= 5; capacity -= 5) {\r\n          bodys.push(WORK, CARRY, MOVE, MOVE);\r\n          if (bodys.length == 12) break;\r\n        }\r\n        return bodys;\r\n      }\r\n      case 'claimer': {\r\n        if (capacity >= 650) {\r\n          return [CLAIM, MOVE];\r\n        } else {\r\n          return [];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","export const tasks = {\r\n  withdraw: {\r\n    creep: [],\r\n    link: [],\r\n    container: [],\r\n    storage: [],\r\n  },\r\n  transfer: {\r\n    spawn: [],\r\n    extension: [],\r\n    tower: [],\r\n    container: [],\r\n    storage: [],\r\n  },\r\n\r\n  returnTransfer: function(room: RoomMemory) {\r\n    findTransferTask(room);\r\n    let task: Id<AnyStoreStructure>[] = [];\r\n    for (let key in tasks.transfer) {\r\n      task = task.concat(tasks.transfer[key]);\r\n    }\r\n    return task;\r\n  },\r\n\r\n  returnWithdraw: function(room: RoomMemory) {\r\n    findWithdraw(room);\r\n    let task: Id<AnyStoreStructure>[] = [];\r\n    for (let key in tasks.withdraw) {\r\n      task = task.concat(tasks.withdraw[key]);\r\n    }\r\n    return task;\r\n  },\r\n}\r\n\r\nfunction findWithdraw(room: RoomMemory) {\r\n  linkTask('withdraw', room);\r\n  containerTask('withdraw', room);\r\n  storageTask('withdraw', room);\r\n}\r\n\r\nfunction findTransferTask(room: RoomMemory) {\r\n  transferTask('spawn', room);\r\n  transferTask('extension', room);\r\n  transferTask('tower', room);\r\n  transferTask('container', room);\r\n  transferTask('storage', room);\r\n}\r\n\r\nfunction transferTask(type: string, room: RoomMemory) {\r\n  let targets:Id<AnyStructure>[] = room.structures.filter(structure => \r\n    Game.getObjectById(structure).structureType == type &&\r\n    (Game.getObjectById(structure) as AnyStoreStructure).store.getFreeCapacity(RESOURCE_ENERGY) > 0);\r\n    for (let i = 0; i < targets.length; ++i) {\r\n      if (!tasks.transfer[type].includes(targets[i]) && \r\n          Game.getObjectById(targets[i]).pos.findInRange(FIND_SOURCES, 2).length == 0) {\r\n        tasks.transfer[type].push(targets[i]);\r\n      }\r\n    }\r\n}\r\n\r\nfunction linkTask(task: string, room: RoomMemory) {\r\n  switch (task) {\r\n    case 'withdraw': {\r\n      let links: Id<StructureLink>[] = room.toLinks;\r\n      for (let i = 0; i < room.toLinks.length; ++i){\r\n        let link = Game.getObjectById(links[i]);\r\n        if (link.store[RESOURCE_ENERGY] > 100 && !tasks.withdraw.link.includes(link.id)) {\r\n          tasks.withdraw.link.push(link.id);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction containerTask(task: string, room: RoomMemory) {\r\n  switch (task) {\r\n    case 'withdraw': {\r\n      let containers: Id<StructureContainer>[] = room.containers;\r\n      for (let i = 0; i < containers.length; ++i) {\r\n        if (Game.getObjectById(containers[i]).pos.findInRange(FIND_SOURCES, 1).length != 0) {\r\n          let container = Game.getObjectById(containers[i]);\r\n          if (container.store[RESOURCE_ENERGY] >= 50 && !tasks.withdraw.container.includes(container.id)) {\r\n            tasks.withdraw.container.push(container.id);\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction storageTask(task: string, room: RoomMemory) {\r\n  switch (task) {\r\n    case 'withdraw': {\r\n      let storage = Game.getObjectById(room.storage);\r\n      if (storage != undefined && !tasks.withdraw.storage.includes(storage.id) &&\r\n          storage.store[RESOURCE_ENERGY] >= 0) {\r\n        tasks.withdraw.storage.push(storage.id);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}","import { tasks } from \"../Tasks/Tasks\";\n\nexport const roleHarvester = {\n  run: function(creep: Creep, room: RoomMemory): void {\n    let transfered: boolean = false;\n    // avoid wasteing\n    if (creep.store.getFreeCapacity() < creep.getActiveBodyparts(WORK) * 2) {\n      transfered = transferEnergy(creep, room);\n    }\n    goHarvest(creep, transfered, room);\n\t}\n};\n\nfunction goHarvest(creep: Creep, transfered: boolean, room: RoomMemory): void {\n  let source: Source = Game.getObjectById(room.sources[creep.memory.sourcesPosition]);\n  if (!creep.pos.isNearTo(source)) {\n    creep.moveTo(source);\n    return;\n  }\n  if (source.energy == 0 || \n      creep.store.getFreeCapacity(RESOURCE_ENERGY) == 0 && !transfered) {\n    return;\n  }\n  let container: StructureContainer[] = source.pos.findInRange(FIND_STRUCTURES, 1).\n    filter(structure => structure.structureType == STRUCTURE_CONTAINER) as StructureContainer[];\n  if (container[0] != undefined) {\n    if (!creep.pos.isEqualTo(container[0])) {\n      creep.moveTo(container[0]);\n    }\n  }\n  creep.harvest(source);\n}\n\nfunction transferEnergy(creep: Creep, room: RoomMemory): boolean {\n  if (Game.getObjectById(creep.memory.waiting) != null) {\n    return;\n  }\n  let links: Id<StructureLink>[] = room.links;\n  let containers: Id<StructureContainer>[] = room.containers;\n  let sources: Id<Source>[] = room.sources;\n  if (links.length == 0 && containers.length < sources.length &&\n      creep.pos.findInRange(FIND_STRUCTURES, 1).filter(structure => \n      structure.structureType == STRUCTURE_CONTAINER).length == 0) {\n    if (!tasks.withdraw.creep.includes(creep.id)) {\n      tasks.withdraw.creep.push(creep.id);\n    }\n    return false;\n  }\n  if (!transfer(creep)) {\n    return false;\n  }\n  return true;\n}\n\nfunction transfer(creep: Creep): boolean {\n  let link: StructureLink = creep.pos.findInRange(FIND_STRUCTURES, 1).filter(structure =>\n    structure.structureType == STRUCTURE_LINK)[0] as StructureLink;\n  if (link != undefined) {\n    let targetLink: StructureLink = Game.getObjectById(link.id);\n    if (creep.transfer(targetLink, RESOURCE_ENERGY) == OK) {\n      return true;\n    }\n    return false;\n  }\n  let container: StructureContainer = creep.pos.findInRange(FIND_STRUCTURES, 1).filter(structure =>\n    structure.structureType == STRUCTURE_CONTAINER)[0] as StructureContainer;\n  if (container != undefined) {\n    if (creep.transfer(container, RESOURCE_ENERGY) == OK) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n}","import { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleHarvester } from \"../Role/RoleHarvester\";\r\n\r\nexport const harvestTask = {\r\n  run: function(room: RoomMemory): void {\r\n    newCreep(room);\r\n    for (let i = 0; i < Memory.roles.harvesters.length; ++i) {\r\n      roleHarvester.run(Game.getObjectById(Memory.roles.harvesters[i]), room);\r\n    }\r\n  }\r\n}\r\n\r\nfunction newCreep(room: RoomMemory): void {\r\n  let harvesters = Memory.roles.harvesters;\r\n  let transfers = Memory.roles.transfers;\r\n  let sources = room.sources;\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = null;\r\n  if (harvesters.length <= transfers.length && harvesters.length < sources.length) {\r\n    Game.spawns['Spawn1'].memory.shouldSpawn = 'harvester';\r\n    newHarvester(harvesters, sources.length);\r\n  }\r\n}\r\n\r\nfunction newHarvester(harvesters: Id<Creep>[], sourcesLength: number): void{\r\n  let newName: string = \"Harvester\" + Game.time;\r\n  let posFlag: number = 0;\r\n  for (let i = 0; i < sourcesLength; ++i) {\r\n    for (let j = 0; j < harvesters.length; ++j) {\r\n      if (i == Game.getObjectById(harvesters[j]).memory.sourcesPosition) {\r\n        posFlag += 1;\r\n        break;\r\n      }\r\n    }\r\n    if (posFlag == i) break;\r\n  }\r\n  if (posFlag >= sourcesLength) return;\r\n\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('harvester'),\r\n    newName, {memory:{role: 'harvester', sourcesPosition: posFlag}});\r\n}","import { tasks } from \"../Tasks/Tasks\";\r\n\r\nexport const roleTransfer = {\r\n  isTransfering: function (creep: Creep): boolean {\r\n    if(creep.memory.transfering && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.transfering = false;\r\n    }\r\n    if(!creep.memory.transfering && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.transfering = true;\r\n    }\r\n    return creep.memory.transfering;\r\n  },\r\n\r\n  goTransfer: function (creep: Creep, task: Id<AnyStoreStructure>) {\r\n    creep.memory.carrierTarget = task;\r\n    let target: AnyStoreStructure = Game.getObjectById(task) as AnyStoreStructure;\r\n    if (target == null || target.store.getFreeCapacity(RESOURCE_ENERGY) == 0) {\r\n      for (let key in tasks.transfer) {\r\n        if (tasks.transfer[key].includes(task)) {\r\n          tasks.transfer[key].splice(tasks.transfer[key].indexOf(task), 1);\r\n          break;\r\n        }\r\n      }\r\n      creep.memory.carrierTarget = null;\r\n      return;\r\n    }\r\n    let type = target.structureType;\r\n    let res: number = 0;\r\n    res = creep.transfer(target, RESOURCE_ENERGY);\r\n    switch (res) {\r\n      case OK: creep.memory.carrierTarget = null; break;\r\n      case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n    }\r\n    tasks.transfer[type].splice(tasks.transfer[type].indexOf(task), 1);\r\n    return;\r\n  },\r\n\r\n  goWithdraw: function(creep: Creep, task: Id<Creep | AnyStoreStructure>) {\r\n    let target: Creep | AnyStoreStructure = Game.getObjectById(task);\r\n    creep.memory.carrierTarget = task;\r\n    if (target == null || target.store[RESOURCE_ENERGY] == 0) {\r\n      for (let key in tasks.withdraw) {\r\n        if (tasks.withdraw[key].includes(target)) {\r\n          tasks.withdraw[key].splice(tasks.withdraw[key].indexOf(task), 1);\r\n          break;\r\n        }\r\n      }\r\n      creep.memory.carrierTarget = null;\r\n      return;\r\n    }\r\n    let res: number = 0;\r\n    if (target instanceof Creep) {\r\n      res = target.transfer(creep, RESOURCE_ENERGY);\r\n      target.memory.waiting = creep.id;\r\n      switch (res) {\r\n        case OK: creep.memory.carrierTarget = null; target.memory.waiting = null; break;\r\n        case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n      }\r\n      tasks.withdraw.creep.splice(tasks.withdraw.creep.indexOf(task), 1);\r\n    } else {\r\n      let type = target.structureType;\r\n      res = creep.withdraw(target, RESOURCE_ENERGY);\r\n      switch (res) {\r\n        case OK: creep.memory.carrierTarget = null; break;\r\n        case ERR_NOT_IN_RANGE: creep.moveTo(target); break;\r\n      }\r\n      tasks.withdraw[type].splice(tasks.withdraw[type].indexOf(task), 1);\r\n    }  \r\n    return;\r\n  },\r\n}","import { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleTransfer } from \"../Role/RoleTransfer\";\r\nimport { tasks } from \"./Tasks\";\r\n\r\nexport const transferTask = {\r\n  run: function(room: RoomMemory) {\r\n    newTransfer(room);\r\n\r\n    let withdrawTask: Id<Creep | AnyStoreStructure>[] = tasks.returnWithdraw(room);\r\n    let transferTask: Id<AnyStoreStructure>[] = tasks.returnTransfer(room);\r\n    let transferIndex = 0;\r\n    let withdrawIndex = 0;\r\n    for (let i = 0; i < Memory.roles.transfers.length; ++i) {\r\n      let transfer: Creep = Game.getObjectById(Memory.roles.transfers[i]);\r\n      if (transfer.memory.carrierTarget != null) {\r\n        if (roleTransfer.isTransfering(transfer)) {\r\n          roleTransfer.goTransfer(transfer, transfer.memory.carrierTarget as Id<AnyStoreStructure>);\r\n        } else {\r\n          roleTransfer.goWithdraw(transfer, transfer.memory.carrierTarget)\r\n        }\r\n        continue;\r\n      }\r\n      if (roleTransfer.isTransfering(transfer)) {\r\n        roleTransfer.goTransfer(transfer, transferTask[transferIndex++]);\r\n      } else {\r\n        roleTransfer.goWithdraw(transfer, withdrawTask[withdrawIndex++]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction newTransfer(room: RoomMemory): void{\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  let harvesters = Memory.roles.harvesters;\r\n  let transfers = Memory.roles.transfers;\r\n  let sources = room.sources;\r\n  let transferNum = room.links.length > 0 ? sources.length * 2 : sources.length;\r\n  if (transfers.length >= harvesters.length && transfers.length >= transferNum) {\r\n      return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'transfer';\r\n\r\n  let newName: string = 'Transfer' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('transfer'), newName, {memory: {\r\n    role: 'transfer',}});\r\n}","export const roleUpgrader = {\n  run: function(creep: Creep, room: RoomMemory): void {\n    if(creep.memory.upgrading && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.upgrading = false;\n    }\n    if(!creep.memory.upgrading && creep.store.getFreeCapacity() == 0) {\n      creep.memory.upgrading = true;\n    }\n\n    if(creep.memory.upgrading) {\n      goUpgrade(creep);\n    } else {\n      goGetEnergy(creep, room);\n    }\n\t}\n};\n\nfunction goUpgrade(creep: Creep): void {\n  if(creep.upgradeController(creep.room.controller) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(creep.room.controller);\n  }\n}\n\nfunction goGetEnergy(creep: Creep, room: RoomMemory): void {\n  let targetContainer: AnyStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, {filter :\n    (structure) => (structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_STORAGE) &&\n    structure.store[RESOURCE_ENERGY] > 0});\n  if (targetContainer == undefined) {\n    let target: Source = Game.getObjectById(room.sources[0]);\n    if (creep.harvest(target) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(target);\n    }\n  } else if (creep.withdraw(targetContainer, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n    creep.moveTo(targetContainer);\n  }\n}","import { roleUpgrader } from \"../Role/RoleUpgrader\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\n\r\nexport const upgradeTask = {\r\n  run: function(room: RoomMemory) {\r\n    let upgraders = Memory.roles.upgraders;\r\n    let upgradersNum = room.sites.length > 0 ? 1 : 3;\r\n    if (Memory.roles.upgraders.length < upgradersNum) {\r\n      newUpgrader();\r\n    }\r\n    for (let i = 0; i < upgraders.length; ++i) {\r\n      roleUpgrader.run(Game.getObjectById(upgraders[i]), room);\r\n    }\r\n  }\r\n}\r\n\r\nfunction newUpgrader() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'upgrader';\r\n  let newName: string = 'Upgrader' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('upgrader'), newName, {\r\n    memory: {role: 'upgrader'}});\r\n}","export const roleBuilder = {\n  run: function (creep: Creep, room: RoomMemory): void {\n    if (backRoom(creep) == 0) {\n      return;\n    }\n    if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) {\n      creep.memory.building = false;\n    } else if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {\n      creep.memory.building = true;\n    }\n\n    if(creep.memory.building) {\n      goBuild(creep, room);\n    } else {\n      goGetEnergy(creep, room);\n    }\n\t}\n};\n\nfunction backRoom(creep: Creep): number {\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\n    return 0;\n  } else {\n    return -1;\n  }\n}\n\nfunction goBuild(creep: Creep, room: RoomMemory): void {\n  let target: ConstructionSite[] = creep.room.find(FIND_CONSTRUCTION_SITES);\n    if(target[0]) {\n      if (creep.store[RESOURCE_ENERGY] < creep.store.getCapacity(RESOURCE_ENERGY) / 2 &&\n        !creep.pos.inRangeTo(target[0], 10)){\n        creep.memory.building = false;\n        return;\n      }\n      if(creep.build(target[0]) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(target[0], {visualizePathStyle: {stroke: '#ffffff'}});\n      }\n    }\n}\n\nfunction goGetEnergy(creep: Creep, room: RoomMemory): void {\n  let targetStore: AnyStoreStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, \n    {filter: (structure) => {return (structure.structureType == STRUCTURE_CONTAINER ||\n    structure.structureType == STRUCTURE_STORAGE) &&\n    structure.store[RESOURCE_ENERGY] > 0}});\n\n  if (targetStore != null) {\n    if (creep.withdraw(targetStore, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n      creep.moveTo(targetStore);\n    }\n    return;\n  }\n  let sources: Source = Game.getObjectById(room.sources[0]);\n  if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\n    if (creep.moveTo(sources[0]) == ERR_NO_PATH) {\n      if (creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {\n        creep.moveTo(sources[1]);\n      }\n    }\n  }\n  return;\n}","export const roleRepairer = {\r\n  run: function(creep: Creep, room: RoomMemory): void {\r\n    if(creep.memory.repairing && creep.store[RESOURCE_ENERGY] == 0) {\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n    } else if(!creep.memory.repairing && creep.store.getFreeCapacity() == 0) {\r\n      creep.memory.repairing = true;\r\n    }\r\n\r\n    if (creep.memory.repairing) {\r\n      goRepair(creep);\r\n      backRoom(creep);\r\n    } else {\r\n      goGetEnergy(creep, room);\r\n    }\r\n  }\r\n}\r\n\r\nfunction backRoom(creep: Creep): void {\r\n  if (creep.room != Game.spawns[\"Spawn1\"].room) {\r\n    creep.moveTo(Game.spawns[\"Spawn1\"]);\r\n  }\r\n}\r\n\r\nfunction goRepair(creep: Creep): void {\r\n  if (global.repairerTarget != null && \r\n      global.repairerTarget.hits < global.repairerTarget.hitsMax) {\r\n    if ((Game.getObjectById(global.repairerTarget.id) as AnyStructure).hits ==\r\n        (Game.getObjectById(global.repairerTarget.id) as AnyStructure).hitsMax) {\r\n      global.repairerTarget = null;\r\n      return;\r\n    }\r\n    if (creep.repair(global.repairerTarget) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(global.repairerTarget);\r\n    }\r\n    return;\r\n  }\r\n  let injured: AnyStructure[] = creep.room.find(FIND_STRUCTURES, {\r\n    filter: object => object.hits < object.hitsMax});\r\n  let targetTo: AnyStructure[] = [];\r\n  if (creep.room.find(FIND_STRUCTURES,{filter:\r\n      structure => structure.structureType == STRUCTURE_TOWER})[0] == undefined){\r\n    targetTo = injured.filter(structure => structure.structureType != STRUCTURE_WALL);\r\n  }\r\n  if (targetTo[0] == undefined) {\r\n    targetTo = injured.sort((a,b) => a.hits - b.hits);\r\n  }\r\n  if (creep.store[RESOURCE_ENERGY] < creep.store.getCapacity(RESOURCE_ENERGY) / 2 &&\r\n      !creep.pos.inRangeTo(targetTo[0], 10)){\r\n      creep.memory.repairing = false;\r\n      global.repairerTarget = null;\r\n      return;\r\n  }\r\n  global.repairerTarget = targetTo[0];\r\n  if (creep.repair(targetTo[0]) == ERR_NOT_IN_RANGE) {\r\n    creep.moveTo(targetTo[0]);\r\n  }\r\n}\r\n\r\nfunction goGetEnergy(creep: Creep, room: RoomMemory): void {\r\n  let targetEnergy: AnyStoreStructure = creep.pos.findClosestByPath(FIND_STRUCTURES, \r\n    {filter: (structure) => {return (structure.structureType == STRUCTURE_CONTAINER ||\r\n    structure.structureType == STRUCTURE_STORAGE)\r\n    && structure.store[RESOURCE_ENERGY] > 0}});\r\n  if (targetEnergy == null) {\r\n    let targetsource: Source = Game.getObjectById(room.sources[0]);\r\n    if(creep.harvest(targetsource) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(targetsource);\r\n    }\r\n  } else {\r\n    if (creep.withdraw(targetEnergy, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n      creep.moveTo(targetEnergy);\r\n      }\r\n  }\r\n}","import { roleBuilder } from \"../Role/RoleBuilder\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\nimport { roleRepairer } from \"@/Role/RoleRepairer\";\r\n\r\nexport const buildTask = {\r\n  run: function(room: RoomMemory) {\r\n    let builders: Id<Creep>[] = Memory.roles.builders;\r\n    let sites: Id<ConstructionSite>[] = room.sites;\r\n    if (sites.length > 0 && builders.length < 3) {\r\n      newBuilder();\r\n    }\r\n    for (let i = 0; i < builders.length; ++i) {\r\n      if (sites.length == 0) {\r\n        roleRepairer.run(Game.getObjectById(builders[i]), room);\r\n      } else {\r\n        roleBuilder.run(Game.getObjectById(builders[i]), room);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction newBuilder() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'builder';\r\n  let newName: string = 'Builder' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('builder'), newName, {\r\n    memory: {role: 'builder'}});\r\n}","import { roleRepairer } from \"../Role/RoleRepairer\";\r\nimport { newCreepBody } from \"../NewCreep/NewCreepBodys\";\r\n\r\nexport const repairTask = {\r\n  run: function(room: RoomMemory) {\r\n    let repairers: Id<Creep>[] = Memory.roles.repaiers;\r\n    let containers: Id<StructureContainer>[] = room.containers;\r\n    if (repairers.length < 1 && containers.length > 0) {\r\n      newRepairer();\r\n    }\r\n    for (let i = 0; i < repairers.length; ++i) {\r\n      roleRepairer.run(Game.getObjectById(repairers[i]), room);\r\n    }\r\n  }\r\n}\r\n\r\nfunction newRepairer() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'repairer';\r\n  let newName: string = 'Repairer' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('repairer'), newName, {\r\n    memory: {role: 'repairer'}});\r\n}","export const roleClaimer = {\r\n  run: function(creep: Creep, flagName: string): void {\r\n    let flag = Game.flags[flagName];\r\n    if (creep.pos.roomName != flag.room.name) {\r\n      creep.moveTo(flag.pos.x, flag.pos.y);\r\n      return;\r\n    }\r\n    if(creep.room.controller) {\r\n      if(creep.claimController(creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n          creep.moveTo(creep.room.controller);\r\n      }\r\n    }\r\n  }\r\n}","import { newCreepBody } from \"@/NewCreep/NewCreepBodys\";\r\nimport { roleClaimer } from \"@/Role/RoleClaimer\";\r\nimport { buildTask } from \"./BuildTask\";\r\n\r\nexport const claimTask = {\r\n  run: function(room: string) {\r\n    let pos = new RoomPosition(1, 1, room);\r\n    if (Game.rooms[pos.roomName] != undefined &&\r\n        Game.rooms[pos.roomName].find(FIND_STRUCTURES).filter(structure =>\r\n          structure.structureType == STRUCTURE_SPAWN).length > 0) {\r\n      Game.flags.claim.remove();\r\n      return;\r\n    }\r\n    if (Game.flags.claim == undefined) {\r\n      Game.flags.claim.setPosition(Game.rooms[pos.roomName].controller.pos);\r\n    }\r\n    if (Game.flags.claim.room.controller.owner.username == null) {\r\n      newClaimer();\r\n      for (let i = 0; i < Memory.roles.claimers.length; ++i) {\r\n        roleClaimer.run(Game.getObjectById(Memory.roles.claimers[i]), 'claim');\r\n      }\r\n    } else if (Game.flags.claim.room.controller.owner.username == 'LazyKitty') {\r\n      buildTask.run(Memory.rooms[Game.flags.claim.room.name]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction newClaimer() {\r\n  if (Game.spawns['Spawn1'].memory.shouldSpawn != null) {\r\n    return;\r\n  }\r\n  if (Memory.roles.claimers.length > 0) {\r\n    return;\r\n  }\r\n  Game.spawns['Spawn1'].memory.shouldSpawn = 'claimer';\r\n  let newName = 'claimer' + Game.time;\r\n  Game.spawns['Spawn1'].spawnCreep(newCreepBody('claimer'), \r\n    newName, {memory:{role: 'harvester'}});\r\n}","// MyMemory\r\nimport { memoryRefresh } from './MyMemory/MemoryRefresh';\r\n// Structure\r\nimport { structureLink } from './Structure/StructureLink';\r\nimport { structureTower } from './Structure/StructureTower';\r\n// tasks\r\nimport { harvestTask } from './Tasks/HarvestTask';\r\nimport { transferTask } from './Tasks/TransferTask';\r\nimport { upgradeTask } from './Tasks/UpgradeTask';\r\nimport { buildTask } from './Tasks/BuildTask';\r\nimport { repairTask } from './Tasks/RepairTask';\r\nimport { claimTask } from './Tasks/ClaimTask';\r\n\r\nexport const loop = function (): void {\r\n  if(Game.cpu.bucket == 10000) {\r\n    Game.cpu.generatePixel();\r\n  }\r\n  if (Game.spawns.Spawn1 != undefined) {\r\n    // refresh memory\r\n    if (Game.time % 10 == 0) {\r\n      memoryRefresh.refresh();\r\n    }\r\n    for (let name in Memory.rooms) {\r\n      let room = Memory.rooms[name];\r\n      // run tasks\r\n      harvestTask.run(room);\r\n      transferTask.run(room);\r\n      buildTask.run(room);\r\n      upgradeTask.run(room);\r\n      repairTask.run(room);\r\n      claimTask.run('W59S26');\r\n      // run structures\r\n      for (let name in Game.structures) {\r\n        let structure = Game.structures[name];\r\n        switch (structure.structureType) {\r\n          case STRUCTURE_TOWER : structureTower.run(structure as StructureTower); break;\r\n          case STRUCTURE_LINK : structureLink.run(structure as StructureLink, room); break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],"names":["transfer","transferTask","goGetEnergy","backRoom"],"mappings":"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"}